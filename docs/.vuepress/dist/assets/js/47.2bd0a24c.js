(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{301:function(t,s,a){"use strict";a.r(s);var n=a(17),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"vim"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vim"}},[t._v("#")]),t._v(" VIM")]),t._v(" "),a("h2",{attrs:{id:"vim-plug插件管理器插件使用指南"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vim-plug插件管理器插件使用指南"}},[t._v("#")]),t._v(" vim-plug插件管理器插件使用指南")]),t._v(" "),a("blockquote",[a("p",[t._v("Vim-plug 是一个自由、开源、速度非常快的、极简的 vim 插件管理器。它可以并行地安装或更新插件。你还可以回滚更新。它创建浅层克隆shallow clone最小化磁盘空间使用和下载时间。它支持按需加载插件以加快启动时间。其他值得注意的特性是支持分支/标签/提交、post-update 钩子、支持外部管理的插件等。")])]),t._v(" "),a("h3",{attrs:{id:"_1-安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-安装"}},[t._v("#")]),t._v(" 1.安装")]),t._v(" "),a("p",[t._v("Windows中gvim安装")]),t._v(" "),a("p",[t._v("下载地址：https://github.com/junegunn/vim-plug.git")]),t._v(" "),a("p",[t._v("将下载到的plug.vim放入D:\\Program Files (x86)\\Vim\\vim81\\autoload内")]),t._v(" "),a("h3",{attrs:{id:"_2-用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-用法"}},[t._v("#")]),t._v(" 2.用法")]),t._v(" "),a("h4",{attrs:{id:"安装插件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装插件"}},[t._v("#")]),t._v(" 安装插件")]),t._v(" "),a("p",[t._v("要安装插件，你必须如下所示首先在 Vim 配置文件中声明它们。一般 Vim 的配置文件是 ~/.vimrc，Neovim 的配置文件是 ~/.config/nvim/init.vim。请记住，当你在配置文件中声明插件时，列表应该以 call plug#begin(PLUGIN_DIRECTORY) 开始，并以 plug#end() 结束。")]),t._v(" "),a("p",[t._v("例如，我们安装 “lightline.vim” 插件。为此，请在 ~/.vimrc 的顶部添加以下行。")]),t._v(" "),a("div",{staticClass:"language-vim extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vim"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("call")]),t._v(" plug#"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("begin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'~/.vim/plugged'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nPlug "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'itchyny/lightline.vim'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("call")]),t._v(" plug#"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("在 vim 配置文件中添加上面的行后，通过输入以下命令重新加载：\n:source ~/.vimrc\n或者，只需重新打开 Vim 编辑器")]),t._v(" "),a("p",[t._v("现在，打开 vim 编辑器：")]),t._v(" "),a("p",[t._v("$ vim\n使用以下命令检查状态：")]),t._v(" "),a("p",[t._v(":PlugStatus\n然后输入下面的命令，然后按回车键安装之前在配置文件中声明的插件。")]),t._v(" "),a("p",[t._v(":PlugInstall\n更新插件\n要更新插件，请运行：")]),t._v(" "),a("p",[t._v(":PlugUpdate\n更新插件后，按下 d 查看更改。或者，你可以之后输入 :PlugDiff。")]),t._v(" "),a("p",[t._v("审查插件\n有时，更新的插件可能有新的 bug 或无法正常工作。要解决这个问题，你可以简单地回滚有问题的插件。输入 :PlugDiff 命令，然后按回车键查看上次 :PlugUpdate的更改，并在每个段落上按 X 将每个插件回滚到更新前的前一个状态。")]),t._v(" "),a("p",[t._v("删除插件\n删除一个插件删除或注释掉你以前在你的 vim 配置文件中添加的 plug 命令。然后，运行 :source ~/.vimrc 或重启 Vim 编辑器。最后，运行以下命令卸载插件：")]),t._v(" "),a("p",[t._v(":PlugClean\n该命令将删除 vim 配置文件中所有未声明的插件。")]),t._v(" "),a("p",[t._v("升级 Vim-plug\n要升级vim-plug本身，请输入：")]),t._v(" "),a("p",[t._v(":PlugUpgrade\n如你所见，使用 Vim-plug 管理插件并不难。它简化了插件管理。现在去找出你最喜欢的插件并使用 Vim-plug 来安装它们。")]),t._v(" "),a("p",[t._v("参考：https://linux.cn/article-9751-1.htm")]),t._v(" "),a("h2",{attrs:{id:"netrw文件浏览器插件使用指南"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#netrw文件浏览器插件使用指南"}},[t._v("#")]),t._v(" netrw文件浏览器插件使用指南")]),t._v(" "),a("blockquote",[a("p",[t._v("在vim 7.0之前，文件浏览功能由explorer.vim插件提供；从vim 7.0之后，这个插件被netrw.vim插件所代替。Netrw插件伴随vim发行，不需要单独安装。")])]),t._v(" "),a("p",[t._v("启动\n使用:Explore命令或缩写:E命令（注意E大写），将在当前窗口中打开文件浏览器：")]),t._v(" "),a("p",[t._v("使用:Sexplore命令或缩写:Sex命令，将在水平拆分窗口中打开文件浏览器：")]),t._v(" "),a("p",[t._v("使用:Vexplore命令或缩写:Vex命令，将在垂直拆分窗口中打开文件浏览器：")]),t._v(" "),a("p",[t._v("当然，也可以在启动Netwr时，指定浏览特定的文件夹：")]),t._v(" "),a("p",[t._v(":Sex C:\\Temp")]),t._v(" "),a("p",[t._v("打开文件\n在Netrw中，可以切换目录并打开文件。使用键盘移动光标至文件或文件夹名称上，然后点击Enter回车键，可以在当前窗口中打开该文件或文件夹；如果希望在新建窗口中打开文件或文件夹，那么可以点击o键。")]),t._v(" "),a("p",[t._v("直接使用鼠标点击文件或文件夹名称，也可以在当前窗口中打开该文件或文件夹。")]),t._v(" "),a("p",[t._v("点击/键，可以在文件列表中进行查找。")]),t._v(" "),a("p",[t._v("改变盘符和目录\n通过编辑目录，可以使用Netrw来浏览该文件夹：")]),t._v(" "),a("p",[t._v(":edit E:_ToDo")]),t._v(" "),a("p",[t._v("排序\n通过设置g:netrw_sort_by和g:netrw_sort_direction，可以按照最近修改时间来进行排序：")]),t._v(" "),a("p",[t._v("let g:netrw_sort_by = 'time'\nlet g:netrw_sort_direction = 'reverse'\n重命名\n点击大写R键，然后修改窗口底部信息中的第二个文件名，可以重命名当前光标下的文件。")]),t._v(" "),a("p",[t._v("删除\n点击大写D键，然后在窗口底部信息中进行确认，则可以删除当前光标下的文件。")]),t._v(" "),a("p",[t._v("配置文件打开方式\n默认情况下，Netrw将在当前窗口中打开文件。 使用以下命令，可以配置Netrw打开文件的方式：")]),t._v(" "),a("p",[t._v("let g:netrw_browse_split = n")]),t._v(" "),a("p",[t._v("其中，参数的值可以为以下四种：")]),t._v(" "),a("p",[t._v("用水平拆分窗口打开文件\n用垂直拆分窗口打开文件\n用新建标签页打开文件\n用前一个窗口打开文件\n定制外观\n点击i键，可以在thin/long/wide/tree这4种显示模式之间切换。也可以在vimrc配置文件中，使用以下命令来设置显示模式：")]),t._v(" "),a("p",[t._v("let g:netrw_liststyle = 3")]),t._v(" "),a("p",[t._v("点击I键，可以显示或隐藏Netrw顶端的横幅（Banner）。例如以下命令，将隐藏横幅：")]),t._v(" "),a("p",[t._v("let g:netrw_banner = 0")]),t._v(" "),a("p",[t._v("使用以下命令，可以设置文件浏览器的宽度，为窗口的25%：")]),t._v(" "),a("p",[t._v("let g:netrw_winsize = 25")]),t._v(" "),a("p",[t._v("通过以上配置，我们可以得到通常IDE环境的文件显示效果：")]),t._v(" "),a("p",[t._v("退出\n使用:q命令，可以退出当前的Netrw；如果Netrw是唯一打开的窗口，那么将同时退出Vim。")]),t._v(" "),a("p",[t._v("我们可以将Netrw理解为，使用编辑命令对于目录进行操作的特殊缓冲区。也就是说，我们可以使用:bdelete命令，来关闭Netwr打开的缓冲区，但不会退出Vim。")]),t._v(" "),a("p",[t._v("帮助信息\nNetrw不仅可以浏览本地文件，还支持远程文件的读写。你可以通过ftp，ssh，http等多种协议来浏览远程机器的目录并编辑远程文件。")]),t._v(" "),a("p",[t._v("如果你使用图形界面的GVim，那么也可以通过菜单来使用Netrw的功能：")]),t._v(" "),a("p",[t._v("在Netrw中点击F1键，或者使用:help netrw命令，可以查看更多帮助信息。")]),t._v(" "),a("h2",{attrs:{id:"gvim文本编辑器使用指南"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gvim文本编辑器使用指南"}},[t._v("#")]),t._v(" gvim文本编辑器使用指南")]),t._v(" "),a("blockquote",[a("p",[t._v("gVim是着名文本编辑器Vim的windows版本")])]),t._v(" "),a("h3",{attrs:{id:"_1-安装gvim"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-安装gvim"}},[t._v("#")]),t._v(" 1.安装gvim")]),t._v(" "),a("p",[t._v("下载地址：https://pc.qq.com/detail/1/detail_3021.html")]),t._v(" "),a("p",[t._v("安装后出现gvim打开中文乱码和菜单乱码处理方法\n在配置文件_vimrc添加以下内容")]),t._v(" "),a("div",{staticClass:"language-vim extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vim"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('"解决页面乱码')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("encoding")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("utf"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("fileencodings")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("utf"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("chiese"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("latin"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("has")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"win32"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("fileencoding")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("chinese\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("fileencoding")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("utf"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("endif")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('"解决菜单乱码')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("source")]),t._v(" $VIMRUNTIME"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("delmenu"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("vim")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("source")]),t._v(" $VIMRUNTIME"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("menu"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("vim")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('"解决console输出乱码')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("language")]),t._v(" messages zh_CN"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("utf"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("gfn")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Consolas"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("h11\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("nu")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("cindent")]),t._v("\n")])])]),a("h3",{attrs:{id:"_2-安装vim-plug插件管理器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-安装vim-plug插件管理器"}},[t._v("#")]),t._v(" 2.安装Vim-plug插件管理器")]),t._v(" "),a("p",[t._v("下载地址：https://github.com/junegunn/vim-plug.git")]),t._v(" "),a("p",[t._v("将下载到的plug.vim放入D:\\Program Files (x86)\\Vim\\vim81\\autoload内")]),t._v(" "),a("h3",{attrs:{id:"_3-使用文件浏览器-netrw"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用文件浏览器-netrw"}},[t._v("#")]),t._v(" 3.使用文件浏览器(Netrw)")]),t._v(" "),a("blockquote",[a("p",[t._v("在vim 7.0之前，文件浏览功能由explorer.vim插件提供；从vim 7.0之后，这个插件被netrw.vim插件所代替。Netrw插件伴随vim发行，不需要单独安装。")])]),t._v(" "),a("p",[t._v("使用:Explore命令或缩写:E命令（注意E大写），将在当前窗口中打开文件浏览器")]),t._v(" "),a("p",[t._v("vim打开多窗口、多文件之间的切换")]),t._v(" "),a("div",{staticClass:"language-vim extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vim"}},[a("code",[t._v("打开多个文件：\n一、"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("vim")]),t._v("还没有启动的时候：\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("在终端里输入 \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("vim")]),t._v(" file1 file2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v(" filen便可以打开所有想要打开的文件\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("vim")]),t._v("已经启动\n输入\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("e")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("file")]),t._v("\n可以再打开一个文件，并且此时"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("vim")]),t._v("里会显示出"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("file")]),t._v("文件的内容。\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("同时显示多个文件：\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sp")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("水平切分窗口\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("vsplit")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("垂直切分窗口\n二、在文件之间切换：\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("文件间切换\nCtrl"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("两文件间的切换\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bn")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("下一个文件\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bp")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("上一个文件\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ls")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("列出打开的文件，带编号\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("b1~"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("n")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("切换至第"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("n")]),t._v("个文件\n对于用"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("split")]),t._v("在多个窗格中打开的文件，这种方法只会在当前窗格中切换不同的文件。\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(".")]),t._v("在窗格间切换的方法\nCtrl"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("w")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("方向键——切换到前／下／上／后一个窗格\nCtrl"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("w")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("h")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("j")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("k")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("l")]),t._v(" ——同上\nCtrl"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("ww")]),t._v("——依次向后切换到下一个窗格中\n")])])]),a("h3",{attrs:{id:"_4-常用的操作技巧"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-常用的操作技巧"}},[t._v("#")]),t._v(" 4.常用的操作技巧")]),t._v(" "),a("p",[t._v("insert模式")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('i insert模式，按ESC回到Normal模式\nx 删除当前光标所在处的一个字符\n:wq 存盘+退出（:w 存盘，:q 退出）\ndd 删除当前行，并把内容复制到剪贴板\np 粘贴\nhjkl 左下上右移动\na 在光标后插入\no 在当前行下插入新行\nO 在当前行上插入新行\ncw 替换从光标所在位置后到第一个单词结尾的字符\n0 数字零，到行头\n^ 到本行第一个不是blank字符的位置（所谓blank字符就是空格，tab，换行，回车等）\n$ 到本行行尾\n_ 到本行最后一个不是blank字符的位置\n/pattern 搜索pattern字符串 \\c大小写不敏感 \\C大小写敏感（如果有多个匹配项，按n可到下一个）\np 粘贴在当前位置之后，P是之前\nyy 拷贝当前行\nu 撤销\nc-r 恢复（ctrl+r）\n:e <path/file> 打开一个文件\n:w 存盘\n:saveas <path/file> 另存为\n:x :wq 保存并退出\n:q! 退出不保存\n:bn :bp 打开多个文件时，使用这两个命令切换到上一个下一个文件\n. 可重复上一组命令\nN<command> 重复命令N次\n2dd 删除两行\n3p 粘贴3次\nNG 13G跳转到13行\ngg 到第一行\nG 到最后一行\nw 到下一个单词的开头\ne 到一个单词的结尾\n% 匹配括号移动\n* # 匹配光标当前位置的单词，移动当上一个下一个\n0y$ 0先到行头，y从这里开始拷贝，$拷贝到本行最后一个字符\nye 从当前位置拷贝到本单词最后一个字符\ny2/foo 拷贝2个foo之间的字符串\nd 删除\nv 可视化选择(你可以先按v，然后移动光标，你就会看到文本被选择，然后，你可以d，也可y，也可以变大写等)\ngU 变大写\ngu 变小写\nfa 到下一个为a的字符处\nt, 到逗号前的第一个字符处\n3fa 在当前行查找第三个出现的a\nF T f t 用法一样，只是方向相反\ndt" 删除所有内容，知道遇到双引号"\n')])])]),a("p",[t._v("visual模式")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('区域选择：\n<action>a<object>\n<action>i<object>\naction:可以是任何命令，如：d（删除），y（拷贝）\nobject:可能是w（一个单词）,W（一个以空格为分隔的单词），s（一个句子），p（一个段落）。也可以是特别的符号："、\')]}。\n例如：假设你在一个字符串 (map (+) ("foo")) 第一个o的位置\nvi 选择了foo\nva" 选择了"foo"\nvi) 选择了"foo"\nva) 选择了("foo")\nv2i) 选择了map (+) ("foo")\nv2a) (map (+) ("foo"))\n\n块操作<c-v>\n例如：^ <c-v> <c-d> i-- [ESC]\n^ 到行头\n<c-v> 开始块操作（windows下使用<c-q>）\n<c-d> 向下移动（也是可以使用hjkl，%等）\ni-- [ESC] 进入insert模式，插入--，按ESC来为块内每一行生效\n\n自动提示：<c-n>和<c-p>\n在insert模式下，你可以输入一个词的开头，然后按<c-p>或<c-n>，自动补齐功能就出现了\n\n宏录制：qa q @a @@\nqa 把你的操作记录在寄存器a\nq 停止录制\n@a 会替换被录制的宏\n@@ 用来替换最新录制的宏\n例如：在一个只有一行且这一行只用1字符串，键入如下命令 qaYp<c-a>q\nqa 开始录制\nYp 复制行\n<c-a> 数字1增加1\nq 停止录制\n@a 在1下一行写下2\n@@ 在2下一行写下3\n100@@ 会创建100行，并把数据增加到103\n\n可视化选择：v V <c-v>\nJ 把所有行连起来（变成一行）\n< > 左右缩进\n= 自动给缩进\n\n分屏：:split vsplit\n:split 创建分屏（vsplit创建垂直分屏）\n<c-w><dir> dir就是方向，可以是hjkl,用来切换分屏\n<c-w>_ <c-w>| 最大化尺寸\n<c-w>+ <c-w>- 增加减小窗口尺寸\n\n查找和替换：\n:s/foo/goo/g 在当前行查找foo替换为goo\n:%s/foo/goo/g 在全文查找foo替换为goo\n:21,31s/foo/goo/g 在21行到31行之间查找foo替换为goo\n:s/foo/goo/i i大小写不敏感查找替换,I敏感\n:s/foo/goo/gc c表示需要确认是否替换\n\n自动折行 是把长的一行用多行显示 , 不在文件里加换行符用\n:set wrap 设置自动折行\n:set nowrap 设置不自动折行\n\n快速复制一个单词\nvey 复制\nvep 粘贴\n')])])]),a("h1",{attrs:{id:"g-编译器使用指南"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#g-编译器使用指南"}},[t._v("#")]),t._v(" g++编译器使用指南")]),t._v(" "),a("blockquote",[a("p",[t._v("gcc and g++分别是GNU的c & c++编译器。")])]),t._v(" "),a("h2",{attrs:{id:"g-编译时的步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#g-编译时的步骤"}},[t._v("#")]),t._v(" g++编译时的步骤")]),t._v(" "),a("p",[t._v("gcc/g++在执行编译的时候一般有下面4步：")]),t._v(" "),a("p",[t._v("⒈预处理，生成.i的文件[预处理器cpp]。\n⒉将预处理后的文件转换成汇编语言，生成文件.s[编译器egcs]。\n⒊由汇编变为目标代码（机器代码）生成.o的文件[汇编器as]。\n⒋连接目标代码，生成可执行程序[链接器ld]。")]),t._v(" "),a("h2",{attrs:{id:"常用操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用操作"}},[t._v("#")]),t._v(" 常用操作")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ gcc main.cpp -lstdc++ -o main\n")])])]),a("blockquote",[a("p",[t._v("下面是一个保存在文件 helloworld.cpp 中一个简单的 C++ 程序的代码：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('#include <iostream>\nusing namespace std;\nint main()\n{\n    cout << "Hello, world!" << endl;\n    return 0;\n}\n')])])]),a("blockquote",[a("p",[t._v("最简单的编译方式：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ g++ helloworld.cpp\n")])])]),a("blockquote",[a("p",[t._v("由于命令行中未指定可执行程序的文件名，编译器采用默认的 a.out。程序可以这样来运行：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ ./a.out\nHello, world!\n")])])]),a("blockquote",[a("p",[t._v("通常我们使用 -o 选项指定可执行程序的文件名，以下实例生成一个 helloworld 的可执行文件：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ g++ helloworld.cpp -o helloworld\n")])])]),a("blockquote",[a("p",[t._v("执行 helloworld:")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ ./helloworld\nHello, world!\n")])])]),a("blockquote",[a("p",[t._v("如果是多个 C++ 代码文件，如 runoob1.cpp、runoob2.cpp，编译命令如下：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ g++ runoob1.cpp runoob2.cpp -o runoob\n")])])]),a("blockquote",[a("p",[t._v("生成一个 runoob 可执行文件。")])]),t._v(" "),a("blockquote",[a("p",[t._v("g++ 有些系统默认是使用 C++98，我们可以指定使用 C++11 来编译 main.cpp 文件：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("g++ -g -Wall -std=c++11 main.cpp\n")])])]),a("p",[t._v("g++ 常用命令选项")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('选项\t解释\n-ansi\t只支持 ANSI 标准的 C 语法。这一选项将禁止 GNU C 的某些特色， 例如 asm 或 typeof 关键词。\n-c \t只编译并生成目标文件。\n-DMACRO \t以字符串"1"定义 MACRO 宏。\n-DMACRO=DEFN\t以字符串"DEFN"定义 MACRO 宏。\n-E \t只运行 C 预编译器。\n-g \t生成调试信息。GNU 调试器可利用该信息。\n-IDIRECTORY \t指定额外的头文件搜索路径DIRECTORY。\n-LDIRECTORY\t指定额外的函数库搜索路径DIRECTORY。\n-lLIBRARY\t连接时搜索指定的函数库LIBRARY。\n-m486 \t针对 486 进行代码优化。\n-o\tFILE 生成指定的输出文件。用在生成可执行文件时。\n-O0\t不进行优化处理。\n-O \t或 -O1 优化生成代码。\n-O2\t进一步优化。\n-O3\t比 -O2 更进一步优化，包括 inline 函数。\n-shared\t生成共享目标文件。通常用在建立共享库时。\n-static\t禁止使用共享连接。\n-UMACRO \t取消对 MACRO 宏的定义。\n-w\t不生成任何警告信息。\n-Wall \t生成所有警告信息。\n')])])])])}),[],!1,null,null,null);s.default=e.exports}}]);