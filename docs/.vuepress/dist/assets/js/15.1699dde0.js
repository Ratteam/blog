(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{295:function(n,t,e){"use strict";e.r(t);var i=e(17),a=Object(i.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("TOC"),n._v(" "),e("h2",{attrs:{id:"android-教程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#android-教程"}},[n._v("#")]),n._v(" Android 教程")]),n._v(" "),e("p",[n._v("Android是一个开源的，基于Linux的移动设备操作系统，主要使用于移动设备，如智能手机和平板电脑。Android是由谷歌及其他公司带领的开放手机联盟开发的。")]),n._v(" "),e("p",[n._v("Android编程是基于Java编程语言的，因此，如果你理解Java编程，这将利于你更好的学习Android应用程序开发。")]),n._v(" "),e("h2",{attrs:{id:"android-概述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#android-概述"}},[n._v("#")]),n._v(" Android 概述")]),n._v(" "),e("p",[e("strong",[n._v("什么是 Android？")])]),n._v(" "),e("p",[n._v("Android 是一个开源的，基于 Linux 的移动设备操作系统，如智能手机和平板电脑。Android 是由谷歌及其他公司带领的开放手机联盟开发的。")]),n._v(" "),e("p",[n._v("Android 提供了一个统一的应用程序开发方法，这意味着开发人员只需要为 Android 进行开发，这样他们的应用程序就能够运行在不同搭载 Android 的移动设备上。")]),n._v(" "),e("p",[n._v("谷歌在2007年发布了第一个测试版本的 Android 软件开发工具包（SDK），第一个商业版本的 Android 1.0，则发布于2008年9月。")]),n._v(" "),e("p",[n._v("2012年6月27日，在谷歌I/O大会上，谷歌宣布发布了 Android 版本4.1 Jelly Bean。 Jelly Bean 是一个在功能和性能方面的渐进的更新，主要目的是改进用户界面，")]),n._v(" "),e("p",[n._v("Android 源代码是根据自由和开放源码软件许可证。谷歌发布的大部分代码遵循 Apache 许可证2.0版，Linux 内核的变化遵循 GNU 通用公共许可证版本2。")]),n._v(" "),e("p",[e("strong",[n._v("Android 开发优势")])]),n._v(" "),e("p",[n._v("开放源代码")]),n._v(" "),e("p",[n._v("众多开发者及强大的社区")]),n._v(" "),e("p",[n._v("不断增长的市场")]),n._v(" "),e("p",[n._v("国际化的 App 集成")]),n._v(" "),e("p",[n._v("低廉的开发成本")]),n._v(" "),e("p",[n._v("更高的成功几率")]),n._v(" "),e("p",[n._v("丰富的开发环境")]),n._v(" "),e("p",[e("strong",[n._v("Android 的特性")])]),n._v(" "),e("p",[n._v("Android 是一款与 Apple 4GS 竞争的功能强大的操作系统，并支持一些伟大的特性。以下列举出部分功能：")]),n._v(" "),e("p",[n._v("漂亮的 UI\tAndroid 操作系统的基本屏幕提供了漂亮又直观的用户界面。")]),n._v(" "),e("p",[n._v("连接性\tGSM/EDGE, IDEN, CDMA, EV-DO, UMTS, Bluetooth, Wi-Fi, LTE, NFC 和 WiMAX.")]),n._v(" "),e("p",[n._v("存储\t用于数据存储的轻量级关系型数据库SQLite")]),n._v(" "),e("p",[n._v("媒体支持\tH.263, H.264, MPEG-4 SP, AMR, AMR-WB, AAC, HE-AAC, AAC 5.1, MP3, MIDI, Ogg Vorbis, WAV, JPEG, PNG, GIF, 和 BMP")]),n._v(" "),e("p",[n._v("消息\tSMS 和 MMS")]),n._v(" "),e("p",[n._v("Web 浏览器\t基于开源的 WebKit 布局引擎，再加上支持 HTML5 和 CSS3 Chrome 的 V8 JavaScript 引擎。")]),n._v(" "),e("p",[n._v("多点触控\tAndroid原生支持多点触控，从最初的手持设备开始便有，如 HTC Hero。")]),n._v(" "),e("p",[n._v("多任务\t用户可以跳从一个任务到另一个任务，并且相同时间可以同时运行各种应用。")]),n._v(" "),e("p",[n._v("可调整的 widgets\tWidgets是可调整大小，这样用户就可以扩大更多的内容或缩小以节省空间。")]),n._v(" "),e("p",[n._v("多语言\t支持单向和多向文本。")]),n._v(" "),e("p",[n._v("GCM\t谷歌云消息（GCM）是一种服务，让开发人员对 Android 设备的用户发送短消息数据，而无需专有的同步解决方案。")]),n._v(" "),e("p",[n._v("Wi-Fi Direct\t一种通过高带宽的对等网络连接来直接发现和配对应用的技术。")]),n._v(" "),e("p",[n._v("Android Beam\t一个流行的基于 NFC 的技术，使用户能够即时共享，只需通过触摸 NFC 功能将两个手机连在一起。")]),n._v(" "),e("p",[e("strong",[n._v("Android 应用程序")])]),n._v(" "),e("p",[n._v("Android 应用程序一般使用 Android 软件开发工具包，采用 Java 语言来开发。")]),n._v(" "),e("p",[n._v("一旦开发完成，Android 应用程序可以容易的打包，并在诸如 Google Play 和亚马逊应用商店上出售。")]),n._v(" "),e("p",[n._v("Android 在世界各地190多个国家有数以百万计的移动设备。这是任何移动平台和快速增长的最大的安装基础。全球每天有超过100万个新的 Android 设备被激活。")]),n._v(" "),e("p",[n._v("本教程的写作目的是教会你如何开发并打包 Android 应用程序。我们将从 Android 应用程序编程环境设置开始，然后深入 Android 应用程序开发的各个方面。")]),n._v(" "),e("p",[e("strong",[n._v("Android 的历史")]),n._v("\nAndroid 的代码名称现在从 A 排到了 L，分别是 Aestro, Blender, Cupcake, Donut, Eclair, Froyo, Gingerbread, Honeycomb, Ice Cream Sandwitch, Jelly Bean, KitKat and Lollipop。让我们按顺序了解 Android 的历史。")]),n._v(" "),e("p",[n._v("纸杯蛋糕 (Cupcake)")]),n._v(" "),e("p",[n._v("甜甜圈 (Donut)")]),n._v(" "),e("p",[n._v("闪电泡芙 (Eclair)")]),n._v(" "),e("p",[n._v("冻酸奶 (Froyo)")]),n._v(" "),e("p",[n._v("姜饼 (Gingerbread)")]),n._v(" "),e("p",[n._v("蜂巢 (Honeycomb)")]),n._v(" "),e("p",[n._v("冰淇淋三明治 (Ice Cream Sandwich)")]),n._v(" "),e("p",[n._v("果冻豆 (Jelly Bean)")]),n._v(" "),e("p",[n._v("奇巧 (KitKat)")]),n._v(" "),e("p",[n._v("棒棒糖 (Lollipop)")]),n._v(" "),e("p",[n._v("**什么是 API 级别？\nAPI 级别是一个用于唯一标识 API 框架版本的整数，由某个版本的 Android 平台提供。")]),n._v(" "),e("p",[n._v("平台版本\tAPI 等级\tVERSION_CODE\t\nAndroid 5.1\t22\tLOLLIPOP_MR1\t\nAndroid 5.0\t21\tLOLLIPOP\t\nAndroid 4.4W\t20\tKITKAT_WATCH\tKitKat for Wearables Only\nAndroid 4.4\t19\tKITKAT\t\nAndroid 4.3\t18\tJELLY_BEAN_MR2\t\nAndroid 4.2, 4.2.2\t17\tJELLY_BEAN_MR1\t\nAndroid 4.1, 4.1.1\t16\tJELLY_BEAN\t\nAndroid 4.0.3, 4.0.4\t15\tICE_CREAM_SANDWICH_MR1\t\nAndroid 4.0, 4.0.1, 4.0.2\t14\tICE_CREAM_SANDWICH\t\nAndroid 3.2\t13\tHONEYCOMB_MR2\t\nAndroid 3.1.x\t12\tHONEYCOMB_MR1\t\nAndroid 3.0.x\t11\tHONEYCOMB\t\nAndroid 2.3.4\nAndroid 2.3.3 10\tGINGERBREAD_MR1\t\nAndroid 2.3.2\nAndroid 2.3.1\nAndroid 2.3 9\tGINGERBREAD\t\nAndroid 2.2.x\t8\tFROYO\nAndroid 2.1.x\t7\tECLAIR_MR1\t\nAndroid 2.0.1\t6\tECLAIR_0_1\t\nAndroid 2.0\t5\tECLAIR\t\nAndroid 1.6\t4\tDONUT\t\nAndroid 1.5\t3\tCUPCAKE\t\nAndroid 1.1\t2\tBASE_1_1\t\nAndroid 1.0\t1\tBASE")]),n._v(" "),e("h2",{attrs:{id:"android-开发环境搭建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#android-开发环境搭建"}},[n._v("#")]),n._v(" Android 开发环境搭建")]),n._v(" "),e("p",[n._v("首先，你可以在以下的操作系统开始 Android 应用程序开发：")]),n._v(" "),e("p",[n._v("Microsoft Windows XP 或更高版本。\n带有英特尔芯片的 Mac OS X10.5.8或更高版本。\n包括 GNU C 库2.7或更高版本的 Linux 系统。\n第二，开发 Android 应用程序所需的所有工具都是免费的，可以从网上下载。以下是开始开发 Android 应用程序需要用到的软件列表。")]),n._v(" "),e("p",[n._v("Java JDK5 或 以后版本\nAndroid SDK\nJava运行时环境（JRE）\nAndroid Studio\n(可选的)Java开发者使用的Eclipse IDE\n(可选的)Android开发工具(ADT)Eclipse插件\n最后两个组件是可选的，如果是在 Windows 机器上工作，这些组件将方便于开发基于 Java 的应用程序。因此，让我们来看看如何来设置所需的环境。")]),n._v(" "),e("p",[e("strong",[n._v("安装 Java 开发工具包(JDK)")])]),n._v(" "),e("p",[n._v("你可以从 Oracle 的 Java 网站：JDKJava SE下载下载最新版本的 Java 。在下载的文件中找到安装JDK的说明文档，按照给定的说明来安装和配置设置。最后设置 PATH 和 JAVA_HOME 环境变量来引用包含 javac 和 java的目录，通常分别为 java_install_dir/bin 和 java_install_dir。")]),n._v(" "),e("p",[n._v("如果运行的是 Windows，把 JDK 安装在 C:\\jdk1.6.0_15，在 C:\\autoexec.bat 文件添加以下内容：")]),n._v(" "),e("p",[n._v("set PATH=C:\\jdk1.6.0_15\\bin;%PATH%\nset JAVA_HOME=C:\\jdk1.6.0_15")]),n._v(" "),e("p",[n._v('你也可以右键单击"我的电脑"，选择"属性"=》"高级"=》"环境变量"，然后通过按下"确定"按钮来更新 PATH 值。')]),n._v(" "),e("p",[n._v("在 Linux 上，如果 SDK 安装在 /usr/local/jdk1.6.0_15 下，并且使用的是 C shell，把下面的代码到写入 .cshrc 文件。")]),n._v(" "),e("p",[n._v("setenv PATH /usr/local/jdk1.6.0_15/bin:$PATH\nsetenv JAVA_HOME /usr/local/jdk1.6.0_15")]),n._v(" "),e("p",[n._v("如果你使用集成开发环境 Eclipse，那么它自动知道 Java 已安装在哪里。")]),n._v(" "),e("p",[n._v("Android IDE\n有许多复杂而精巧的技术来开发 Android 应用程序。目前主要使用且相似的技术主要是以下两种：")]),n._v(" "),e("p",[n._v("Android Studio\nEclipse ID")]),n._v(" "),e("h2",{attrs:{id:"android-架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#android-架构"}},[n._v("#")]),n._v(" Android 架构")]),n._v(" "),e("p",[n._v("Android 操作系统是一个软件组件的栈，在架构图中它大致可以分为五个部分和四个主要层。")]),n._v(" "),e("p",[e("strong",[n._v("Linux内核")]),n._v("\n在所有层的最底下是 Linux - 包括大约115个补丁的 Linux 3.6。它提供了基本的系统功能，比如进程管理，内存管理，设备管理（如摄像头，键盘，显示器）。同时，内核处理所有 Linux 所擅长的工作，如网络和大量的设备驱动，从而避免兼容大量外围硬件接口带来的不便。")]),n._v(" "),e("p",[e("strong",[n._v("程序库")]),n._v("\n在 Linux 内核层的上面是一系列程序库的集合，包括开源的 Web 浏览器引擎 Webkit ，知名的 libc 库，用于仓库存储和应用数据共享的 SQLite 数据库，用于播放、录制音视频的库，用于网络安全的 SSL 库等。")]),n._v(" "),e("p",[e("strong",[n._v("Android程序库")]),n._v("\n这个类别包括了专门为 Android 开发的基于 Java 的程序库。这个类别程序库的示例包括应用程序框架库，如用户界面构建，图形绘制和数据库访问。一些 Android 开发者可用的 Android 核心程序库总结如下：")]),n._v(" "),e("p",[n._v("android.app - 提供应用程序模型的访问，是所有 Android 应用程序的基石。\nandroid.content - 方便应用程序之间，应用程序组件之间的内容访问，发布，消息传递。\nandroid.database - 用于访问内容提供者发布的数据，包含 SQLite 数据库管理类。\nandroid.opengl - OpenGL ES 3D 图片渲染 API 的 Java 接口。\nandroid.os - 提供应用程序访问标注操作系统服务的能力，包括消息，系统服务和进程间通信。\nandroid.text - 在设备显示上渲染和操作文本。\nandroid.view - 应用程序用户界面的基础构建块。\nandroid.widget - 丰富的预置用户界面组件集合，包括按钮，标签，列表，布局管理，单选按钮等。\nandroid.webkit - 一系列类的集合，允许为应用程序提供内建的 Web 浏览能力。\n看过了 Android 运行层内的基于 Java 的核心程序库，是时候关注一下 Android 软件栈中的基于 C/C++ 的程序库。")]),n._v(" "),e("p",[e("strong",[n._v("Android运行时")]),n._v("\n这是架构中的第三部分，自下而上的第二层。这个部分提供名为 Dalvik 虚拟机的关键组件，类似于 Java 虚拟机，但专门为 Android 设计和优化。")]),n._v(" "),e("p",[n._v("Dalvik 虚拟机使得可以在 Java 中使用 Linux 核心功能，如内存管理和多线程。Dalvik 虚拟机使得每一个 Android 应用程序运行在自己独立的虚拟机进程。")]),n._v(" "),e("p",[n._v("Android 运行时同时提供一系列核心的库来为 Android 应用程序开发者使用标准的 Java 语言来编写 Android 应用程序。")]),n._v(" "),e("p",[e("strong",[n._v("应用框架")]),n._v("\n应用框架层以 Java 类的形式为应用程序提供许多高级的服务。应用程序开发者被允许在应用中使用这些服务。")]),n._v(" "),e("p",[n._v("活动管理者 - 控制应用程序生命周期和活动栈的所有方面。\n内容提供者 - 允许应用程序之间发布和分享数据。\n资源管理器 - 提供对非代码嵌入资源的访问，如字符串，颜色设置和用户界面布局。\n通知管理器 - 允许应用程序显示对话框或者通知给用户。\n视图系统 - 一个可扩展的视图集合，用于创建应用程序用户界面。\n应用程序\n顶层中有所有的 Android 应用程序。你写的应用程序也将被安装在这层。这些应用程序包括通讯录，浏览器，游戏等。")]),n._v(" "),e("h2",{attrs:{id:"android-应用程序组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#android-应用程序组件"}},[n._v("#")]),n._v(" Android 应用程序组件")]),n._v(" "),e("p",[n._v("应用程序组件是一个Android应用程序的基本构建块。这些组件由应用清单文件松耦合的组织。AndroidManifest.xml描述了应用程序的每个组件，以及他们如何交互。")]),n._v(" "),e("p",[n._v("以下是可以在Android应用程序中使用的四个主要组件。")]),n._v(" "),e("p",[n._v("组件\t描述\nActivities\t描述UI，并且处理用户与机器屏幕的交互。\nServices\t处理与应用程序关联的后台操作。\nBroadcast Receivers\t处理Android操作系统和应用程序之间的通信。\nContent Providers\t处理数据和数据库管理方面的问题。")]),n._v(" "),e("p",[e("strong",[n._v("Activities")]),n._v("\n一个活动标识一个具有用户界面的单一屏幕。举个例子，一个邮件应用程序可以包含一个活动用于显示新邮件列表，另一个活动用来编写邮件，再一个活动来阅读邮件。当应用程序拥有多于一个活动，其中的一个会被标记为当应用程序启动的时候显示。")]),n._v(" "),e("p",[n._v("一个活动是Activity类的一个子类，如下所示：")]),n._v(" "),e("p",[n._v("public class MainActivity extends Activity {")]),n._v(" "),e("p",[n._v("}")]),n._v(" "),e("p",[e("strong",[n._v("Services")]),n._v("\n服务是运行在后台，执行长时间操作的组件。举个例子，服务可以是用户在使用不同的程序时在后台播放音乐，或者在活动中通过网络获取数据但不阻塞用户交互。")]),n._v(" "),e("p",[n._v("一个服务是Service类的子类，如下所示：")]),n._v(" "),e("p",[n._v("public class MyService extends Service {")]),n._v(" "),e("p",[n._v("}")]),n._v(" "),e("p",[e("strong",[n._v("Broadcast Receivers")]),n._v("\n广播接收器简单地响应从其他应用程序或者系统发来的广播消息。举个例子，应用程序可以发起广播来让其他应用程序知道一些数据已经被下载到设备，并且可以供他们使用。因此广播接收器会拦截这些通信并采取适当的行动。")]),n._v(" "),e("p",[n._v("广播接收器是BroadcastReceiver类的一个子类，每个消息以Intent对象的形式来广播。")]),n._v(" "),e("p",[n._v("public class MyReceiver  extends  BroadcastReceiver {")]),n._v(" "),e("p",[n._v("}")]),n._v(" "),e("p",[e("strong",[n._v("Content Providers")]),n._v("\n内容提供者组件通过请求从一个应用程序到另一个应用程序提供数据。这些请求由ContentResolver类的方法来处理。这些数据可以是存储在文件系统、数据库或者其他其他地方。")]),n._v(" "),e("p",[n._v("内容提供者是ContentProvider类的子类，并实现一套标准的API，以便其他应用程序来执行事务。")]),n._v(" "),e("p",[n._v("public class MyContentProvider extends  ContentProvider {")]),n._v(" "),e("p",[n._v("}\n我们将在独立的章节中通过这些标签的细节来涵盖应用程序组件。")]),n._v(" "),e("p",[e("strong",[n._v("附件组件")]),n._v("\n有一些附件的组件用于以上提到的实体、他们之间逻辑、及他们之间连线的构造。这些组件如下：")]),n._v(" "),e("p",[n._v("组件\t描述\nFragments\t代表活动中的一个行为或者一部分用户界面。\nViews\t绘制在屏幕上的UI元素，包括按钮，列表等。\nLayouts\t控制屏幕格式，展示视图外观的View的继承。\nIntents\t组件间的消息连线。\nResources\t外部元素，例如字符串资源、常量资源及图片资源等。\nManifest\t应用程序的配置文件。")]),n._v(" "),e("h2",{attrs:{id:"android-hello-world-实例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#android-hello-world-实例"}},[n._v("#")]),n._v(" Android Hello World 实例")]),n._v(" "),e("p",[n._v("让我们开始真正的基于Android框架编程。在开始使用Android SDK写第一个示例之前，请确保你已经按照Android - 环境搭建 教程中介绍的完成了你的Android开发环境搭建。同时，我假设你具备一些Eclipse IDE的知识。")]),n._v(" "),e("p",[n._v('现在让我们开始写一个简单的Android应用程序，可以打印出"Hello World"。')]),n._v(" "),e("p",[e("strong",[n._v("创建 Android 应用")]),n._v("\n第一步是通过Eclipse IDE来创建一个简单地Android应用程序。按照选项File -> New -> Project，最后从向导列表选择 Android New Application 。现在，使用如下的窗口向导将应用程序命名为HelloWorld：")]),n._v(" "),e("p",[n._v("接下来，按照所提供的说明，保持所有的默认输入，直到最后一步。一旦项目创建成功，将会看到如下的项目界面 -")]),n._v(" "),e("p",[e("strong",[n._v("Android应用程序剖析")]),n._v("\n在运行应用之前，你需要知道Android项目中的一些文件目录和文件 -\n序号\t文件夹、文件和说明\n1\tsrc:包含项目中所有的.java源文件，默认情况下，它包括一个 MainActivity.java源文件对应的活动类，当应用程序通过应用图标启动时，将运行它。\n2\tgen:这包含由编译器生成的.R文件，引用了所有项目中的资源。该文件不能被修改。\n3\tbin:这个文件夹包含Android由APT构建的.apk包文件，以及运行Android应用程序所需要的其他所有东西。\n4\tres/drawable-hdpi:这个目录下包括所有的为高密度屏幕设计所需的drawable对象。\n5\tres/layout:这个目录存放用于定义用户界面的文件。\n6\tres/values:这个目录存放各种各样的包含一系列资源的XML文件，比如字符串和颜色的定义。\n7\tAndroidManifest.xml:这个是应用程序的清单文件，描述了应用程序的基础特性，定义它的各种组件。\n下面的章节将给出一些重要的应用程序文件的概览。")]),n._v(" "),e("p",[e("strong",[n._v("主要活动文件")]),n._v("\n主要活动代码在MainActivity.java的Java文件中。这是实际的应用程序文件，将被转化为Dalvik可执行文件并运行。下面是由应用向导为Hello World应用生成的默认代码 -")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("package com.example.helloworld;\n\nimport android.os.Bundle;\nimport android.app.Activity;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.support.v4.app.NavUtils;\n\npublic class MainActivity extends Activity {\n\n   @Override\n   public void onCreate(Bundle savedInstanceState) {\n      super.onCreate(savedInstanceState);\n      setContentView(R.layout.activity_main);\n   }\n\n   @Override\n   public boolean onCreateOptionsMenu(Menu menu) {\n      getMenuInflater().inflate(R.menu.activity_main, menu);\n      return true;\n   }\n}\n")])])]),e("p",[n._v("这里，R.layout.activity_main引用自res/layout目录下的activity_main.xml文件。onCreate()是活动被加载之后众多被调用的方法之一。")]),n._v(" "),e("p",[e("strong",[n._v("Manifest文件")]),n._v("\n无论你开发什么组件用作应用程序中的一部分，都需要在应用程序项目根目录下的manifest.xml文件中声明所有的组件。这个文件是Android操作系统与你的应用程序之间的接口，因此，如果没有在这个文件中声明你的组件，将无法被操作系统所识别。举个例子，一个默认的清单文件看起来如下：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<manifest xmlns:android="http://schemas.android.com/apk/res/android"\n   package="com.example.helloworld"\n   android:versionCode="1"\n   android:versionName="1.0" >\n\n   <uses-sdk\n      android:minSdkVersion="8"\n      android:targetSdkVersion="22" />\n\n   <application\n       android:icon="@drawable/ic_launcher"\n       android:label="@string/app_name"\n       android:theme="@style/AppTheme" >\n\n       <activity\n          android:name=".MainActivity"\n          android:label="@string/title_activity_main" >\n\n          <intent-filter>\n             <action android:name="android.intent.action.MAIN" />\n             <category android:name="android.intent.category.LAUNCHER"/>\n          </intent-filter>\n\n       </activity>\n\n   </application>\n</manifest>\n')])])]),e("p",[n._v("这里，...标签之间是应用程序相关的组件。andnroid:icon属性指出位于res/drawable-hdpi下面的应用程序图标。这个应用使用drawable文件夹下名为ic_launcher.png的图片。")]),n._v(" "),e("p",[n._v("标签用于指定一个活动，android:name属性指定一个Activity类子类的全名。android:label属性指定用于活动名称的字符串。可以使用标签来指定多个活动。")]),n._v(" "),e("p",[n._v("意图过滤器的action被命名为android.intent.action.MAIN，表明这个活动被用做应用程序的入口。意图过滤器的category被命名为android.intent.category.LAUNCHER，表明应用程序可以通过设备启动器的图标来启动。")]),n._v(" "),e("p",[n._v('@string指的是strings.xml(将在后面介绍)。因此，@string/app_name指的是定义在strings.xml中的app_name，实际为"Hello World"。类似的，应用中的其他字符串也很流行。')]),n._v(" "),e("p",[n._v("下面是你的清单文件中将用到的标签，用于指定不同的Android应用程序组件：")]),n._v(" "),e("p",[n._v("活动元素\n服务元素\n广播接收器元素\n内容提供者元素")]),n._v(" "),e("p",[e("strong",[n._v("Strings 文件")]),n._v("\nstrings.xml文件在res/value文件夹下，它包含应用程序使用到的所有文本。例如，按钮、标签的名称，默认文本，以及其他相似的strings。这个文件为他们的文本内容负责。一个默认的strings文件看起来如下：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<resources>\n   <string name="app_name">HelloWorld</string>\n   <string name="hello_world">Hello world!</string>\n   <string name="menu_settings">Settings</string>\n   <string name="title_activity_main">MainActivity</string>\n</resources>\n')])])]),e("p",[n._v("R 文件\ngen/com.example.helloworld/R.java文件是活动的Java文件，如MainActivity.java的和资源如strings.xml之间的胶水。这是一个自动生成的文件，不要修改R.java文件的内容。下面是一个R.java文件的示例：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("/* AUTO-GENERATED FILE.  DO NOT MODIFY.\n *\n * This class was automatically generated by the\n * aapt tool from the resource data it found.  It\n * should not be modified by hand.\n */\n\npackage com.example.helloworld;\n\npublic final class R {\n   public static final class attr {\n   }\n\n   public static final class dimen {\n      public static final int padding_large=0x7f040002;\n      public static final int padding_medium=0x7f040001;\n      public static final int padding_small=0x7f040000;\n   }\n\n   public static final class drawable {\n      public static final int ic_action_search=0x7f020000;\n      public static final int ic_launcher=0x7f020001;\n   }\n\n   public static final class id {\n      public static final int menu_settings=0x7f080000;\n   }\n\n   public static final class layout {\n      public static final int activity_main=0x7f030000;\n   }\n\n   public static final class menu {\n      public static final int activity_main=0x7f070000;\n   }\n\n   public static final class string {\n      public static final int app_name=0x7f050000;\n      public static final int hello_world=0x7f050001;\n      public static final int menu_settings=0x7f050002;\n      public static final int title_activity_main=0x7f050003;\n   }\n\n   public static final class style {\n      public static final int AppTheme=0x7f060000;\n   }\n}\n")])])]),e("p",[e("strong",[n._v("Layout 文件")]),n._v('\nactivity_main.xml是一个在res/layout目录下的layout文件。当应用程序构建它的界面时被引用。你将非常频繁的修改这个文件来改变应用程序的布局。在"Hello World"应用程序中，这个文件具有默认的布局，内容如下：')]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"\n   xmlns:tools="http://schemas.android.com/tools"\n   android:layout_width="match_parent"\n   android:layout_height="match_parent" >\n\n   <TextView\n      android:layout_width="wrap_content"\n      android:layout_height="wrap_content"\n      android:layout_centerHorizontal="true"\n      android:layout_centerVertical="true"\n      android:padding="@dimen/padding_medium"\n      android:text="@string/hello_world"\n      tools:context=".MainActivity" />\n\n</RelativeLayout>\n')])])]),e("p",[n._v('这是一个简单的RelativeLayout的示例，更多内容会在独立的章节中讲解。TextView是一个Android的控件用于构建用户图形界面。它包含有许多不同的属性，诸如android:layout_width, android:layout_height等用来设置它的宽度和高度等。@string指的是res/values文件夹下的strings.xml文件。因此，@string/hello_world指的是定义在strings.xml中的名为hello的字符串："Hello World!"。')]),n._v(" "),e("p",[e("strong",[n._v("运行应用程序")]),n._v("\n让我们尝试运行刚刚建立的Hello World!应用程序。假设在搭建环境时你已经创建好了AVD。从Eclipse运行应用，打开你项目中的一个活动文件，并且点击工具栏上的图片图标。Eclipse在AVD上安装应用，并启动它。如果一切顺利，将显示如下的模拟器窗口 -")]),n._v(" "),e("p",[n._v("恭喜你已经开发了第一个Android应用程序，按照接下来剩余的教程一步一步来，你将成为一个牛B的Android开发人员。")]),n._v(" "),e("h2",{attrs:{id:"android-资源-resources-访问"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#android-资源-resources-访问"}},[n._v("#")]),n._v(" Android 资源(Resources)访问")]),n._v(" "),e("p",[n._v("有许多东西用来构建一个优秀的 Android 应用程序。除了应用程序的编码，你需要关注各种各样的资源，诸如你用到的各种静态内容，如位图，颜色，布局定义，用户界面字符串，动画等等。这些资源一般放置在项目的 res/ 下独立子目录中。")]),n._v(" "),e("p",[n._v("这节教程将学习如何来组织应用程序资源，指定替代资源，并在应用程序中访问它们。")]),n._v(" "),e("h2",{attrs:{id:"在eclipse中组织资源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在eclipse中组织资源"}},[n._v("#")]),n._v(" 在eclipse中组织资源")]),n._v(" "),e("p",[n._v("你需要将每种资源放置在项目中 res/ 目录的特定子目录下。例如，这是一个简单项目的文件层级：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("MyProject/\n    src/  \n        MyActivity.java  \n    res/\n        drawable/  \n            icon.png  \n        layout/  \n            activity_main.xml\n            info.xml\n        values/  \n            strings.xml \n")])])]),e("p",[n._v("res/ 目录在各种子目录中包含了所有的资源。这里有一个图片资源，两个布局资源和一个字符串资源文件。下表详细的给出了在项目中 res/ 目录里面支持的资源。")]),n._v(" "),e("p",[n._v("目录\t资源类型\nanim/\t定义动画属性的XML文件。它们被保存在res/anim/文件夹下，通过R.anim类访问\ncolor/\t定义颜色状态列表的XML文件。它们被保存在res/color/文件夹下，通过R.color类访问\ndrawable/\t图片文件，如.png,.jpg,.gif或者XML文件，被编译为位图、状态列表、形状、动画图片。它们被保存在res/drawable/文件夹下，通过R.drawable类访问\nlayout/\t定义用户界面布局的XML文件。它们被保存在res/layout/文件夹下，通过R.layout类访问\nmenu/\t定义应用程序菜单的XML文件，如选项菜单，上下文菜单，子菜单等。它们被保存在res/menu/文件夹下，通过R.menu类访问\nraw/\t任意的文件以它们的原始形式保存。需要根据名为R.raw.filename的资源ID，通过调用Resource.openRawResource()来打开raw文件\nvalues/\t包含简单值(如字符串，整数，颜色等)的XML文件。这里有一些文件夹下的资源命名规范。arrays.xml代表数组资源，通过R.array类访问；integers.xml代表整数资源，通过R.integer类访问；bools.xml代表布尔值资源，通过R.bool类访问；colors.xml代表颜色资源，通过R.color类访问；dimens.xml代表维度值，通过R.dimen类访问；strings.xml代表字符串资源，通过R.string类访问；styles.xml代表样式资源，通过R.style类访问\nxml/\t可以通过调用Resources.getXML()来在运行时读取任意的XML文件。可以在这里保存运行时使用的各种配置文件")]),n._v(" "),e("p",[e("strong",[n._v("替代资源")]),n._v("\n你的应用程序需要为特定的设备配置提供替代的资源支持。比如说，你需要为不同的屏幕分辨率提供替代的图片资源，为不同的语言提供替代的字符串资源。在运行时，Android 检测当前设备配置，并为应用程序加载合适的资源。")]),n._v(" "),e("p",[n._v("要为特定的配置的确定一系列替代资源，遵循如下的步骤：")]),n._v(" "),e("p",[n._v("在res/ 下创建一个新的目录，以 <resource_name>_<config_qualifier> 的方式命名。这里的 resources_name 是上表中提到的任意资源，如布局、图片等。 qualifier 将确定个性的配置使用哪些资源。你可以查看官方文档来了解不同类型资源的一个完整 qualifier 列表。\n在这个目录中保存响应的替代资源。这些资源文件必须与下面例子中展示的默认资源文件名一致，然而这些文件将确定的内容进行替代。例如：虽然图片的文件名一样，但是高分辨率的屏幕，图片的分辨率也会高。\n下面是一个例子，指定默认屏幕的图片和高分辨率的替代图片。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("MyProject/\n   src/\n    main/\n    java/\n       MyActivity.java  \n       res/\n          drawable/  \n            icon.png\n            background.png\n        drawable-hdpi/  \n            icon.png\n            background.png  \n        layout/  \n            activity_main.xml\n            info.xml\n        values/  \n            strings.xml\n")])])]),e("p",[n._v("下面是另外一个例子，指定默认语言的布局和阿拉伯语言的替代布局。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("MyProject/\n   src/\n    main/\n    java/\n       MyActivity.java  \n      res/\n         drawable/  \n            icon.png\n            background.png\n        drawable-hdpi/  \n            icon.png\n            background.png  \n        layout/  \n            activity_main.xml\n            info.xml\n        layout-ar/\n            main.xml\n        values/  \n            strings.xml\n")])])]),e("p",[e("strong",[n._v("访问资源")]),n._v("\n在应用程序开发中，需要访问定义好的资源，不论是通过代码还是通过 XML 文件。下面的章节介绍如何分别在这两种场景中访问资源。")]),n._v(" "),e("p",[e("strong",[n._v("在代码访问资源")]),n._v("\n当 Android 应用程序被编译，生成一个 R 类，其中包含了所有 res/ 目录下资源的 ID。你可以使用 R 类，通过子类+资源名或者直接使用资源 ID 来访问资源。")]),n._v(" "),e("p",[n._v("实例\n访问 res/drawable/myimage.png，并将其设置到 ImageView 上，你将使用以下代码：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("ImageView imageView = (ImageView) findViewById(R.id.myimageview);\nimageView.setImageResource(R.drawable.myimage);\n")])])]),e("p",[n._v("这里第一行代码用 R.id.myimageview 来在布局文件中获取定义为 myimageview 的 ImageView。第二行用 R.drawable.myimage 来获取在 res/ 的 drawable 子目录下名为 myimage 的图片。")]),n._v(" "),e("p",[n._v("实例\n考虑下一个例子，其中 res/values/strings.xml 有如下定义：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<?xml version="1.0" encoding="utf-8"?>\n<resources>\n    <string  name="hello">Hello, World!</string>\n</resources>\n')])])]),e("p",[n._v("现在你可以在 ID 为 msg 的 TextView 对象上使用资源 ID 来设置文本，具体如下：")]),n._v(" "),e("p",[n._v("TextView msgTextView = (TextView) findViewById(R.id.msg);\nmsgTextView.setText(R.string.hello);\n实例\n考虑如下定义的布局 res/layout/activity_main.xml")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<?xml version="1.0" encoding="utf-8"?>\n<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"\n   android:layout_width="fill_parent" \n   android:layout_height="fill_parent" \n   android:orientation="vertical" >\n\n   <TextView android:id="@+id/text"\n      android:layout_width="wrap_content"\n      android:layout_height="wrap_content"\n      android:text="Hello, I am a TextView" />\n\n   <Button android:id="@+id/button"\n      android:layout_width="wrap_content"\n      android:layout_height="wrap_content"\n      android:text="Hello, I am a Button" />\n\n</LinearLayout>\n')])])]),e("p",[n._v("这个应用程序代码将为活动加载这个布局，onCreate() 方法中如下：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("public void onCreate(Bundle savedInstanceState) {\n   super.onCreate(savedInstanceState);\n   setContentView(R.layout.main_activity);\n}\n")])])]),e("p",[e("strong",[n._v("在XML中访问")]),n._v("\n考虑下面的 XML 资源文件 res/values/strings.xml，其中包含一个颜色资源和一个字符串资源 -")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<?xml version="1.0" encoding="utf-8"?>\n<resources>\n   <color name="opaque_red">#f00</color>\n   <string name="hello">Hello!</string>\n</resources>\n')])])]),e("p",[n._v("现在，你可以在下面的布局文件中使用这些资源来设置文本颜色和文本内容：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<?xml version="1.0" encoding="utf-8"?>\n<EditText xmlns:android="http://schemas.android.com/apk/res/android"\n    android:layout_width="fill_parent"\n    android:layout_height="fill_parent"\n    android:textColor="@color/opaque_red"\n    android:text="@string/hello" />\n')])])]),e("p",[n._v('现在，你如果再次回到上一章节讲解的" Hello World! "实例，我可以确定，你对这节中所有的概念有了更好的理解。所以，我强烈建议回去看看之前的实例，并查看我使用不同资源的基本用法。')]),n._v(" "),e("h2",{attrs:{id:"android-活动-activity"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#android-活动-activity"}},[n._v("#")]),n._v(" Android 活动(Activity)")]),n._v(" "),e("p",[n._v("活动代表了一个具有用户界面的单一屏幕，如 Java 的窗口或者帧。Android 的活动是 ContextThemeWrapper 类的子类。")]),n._v(" "),e("p",[n._v("如果你曾经用 C,C++ 或者 Java 语言编程，你应该知道这些程序从 main() 函数开始。很类似的，Android 系统初始化它的程序是通过活动中的 onCreate() 回调的调用开始的。存在有一序列的回调方法来启动一个活动，同时有一序列的方法来关闭活动，如下面的活动声明周期图所示：")]),n._v(" "),e("p",[n._v("Activity 类定义了下面的回调。你可以不用实现所有的回调方法。但了解其中的每一个非常的重要，实现这些可以保证你的应用行为如用户所期望的那样。")]),n._v(" "),e("p",[n._v("回调\t描述\nonCreate()\t这是第一个回调，在活动第一次创建时调用\nonStart()\t这个回调在活动为用户可见时被调用\nonResume()\t这个回调在应用程序与用户开始可交互的时候调用\nonPause()\t被暂停的活动无法接受用户输入，不能执行任何代码。当前活动将要被暂停，上一个活动将要被恢复时调用\nonStop()\t当活动不在可见时调用\nonDestroy()\t当活动被系统销毁之前调用\nonRestart()\t当活动被停止以后重新打开时调用\n实例\n这个实例通过简单地步骤展示 Android 应用程序活动的生命周期。按照下面的步骤来修改我们在 Hello World 实例章节中创建的 Android 应用程序。")]),n._v(" "),e("p",[n._v("步骤\t描述\n1\t使用eclipse IDE来创建一个Android应用程序，并命名为HelloWorld放在com.example.helloworld包下。如之前Hello World Example章节中介绍。\n2\t按照下面修改主要活动文件MainActivity.java。保持其他部分不变。\n3\t运行应用程序来打开Android模拟器，并检查应用程序的修改结果。\n下面是主要活动文件src/com.example.helloworld/MainActivity.java修改的内容。里面包含每一个基本的生命周期方法。Log.d()方法用来生成日志信息：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('package com.example.helloworld;\n\nimport android.os.Bundle;\nimport android.app.Activity;\nimport android.util.Log;\n\npublic class MainActivity extends Activity {\n   String msg = "Android : ";\n\n   /** 当活动第一次被创建时调用 */\n   @Override\n   public void onCreate(Bundle savedInstanceState) {\n      super.onCreate(savedInstanceState);\n      setContentView(R.layout.activity_main);\n      Log.d(msg, "The onCreate() event");\n   }\n\n   /** 当活动即将可见时调用 */\n   @Override\n   protected void onStart() {\n      super.onStart();\n      Log.d(msg, "The onStart() event");\n   }\n\n   /** 当活动可见时调用 */\n   @Override\n   protected void onResume() {\n      super.onResume();\n      Log.d(msg, "The onResume() event");\n   }\n\n   /** 当其他活动获得焦点时调用 */\n   @Override\n   protected void onPause() {\n      super.onPause();\n      Log.d(msg, "The onPause() event");\n   }\n\n   /** 当活动不再可见时调用 */\n   @Override\n   protected void onStop() {\n      super.onStop();\n      Log.d(msg, "The onStop() event");\n   }\n\n   /** 当活动将被销毁时调用 */\n   @Override\n   public void onDestroy() {\n      super.onDestroy();\n      Log.d(msg, "The onDestroy() event");\n   }\n}\n')])])]),e("p",[n._v("活动类从项目的res/layout中的XML文件加载所有的UI组件。下面的语句从res/layout/activity_main.xml文件中加载UI组件：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("setContentView(R.layout.activity_main);\n")])])]),e("p",[n._v("一个应用程序可以有1个或多个活动，而没有任何限制。每个为应用程序所定义的活动都需要在AndroidManifest.xml中声明。应用的主要活动需要在清单中声明，且意图过滤器标签中需要包含 MAIN 动作和 LAUNCHER 类别。如下：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<manifest xmlns:android="http://schemas.android.com/apk/res/android"\n   package="com.example.helloworld"\n   android:versionCode="1"\n   android:versionName="1.0" >\n\n   <uses-sdk\n      android:minSdkVersion="8"\n      android:targetSdkVersion="22" />\n\n   <application\n       android:icon="@drawable/ic_launcher"\n       android:label="@string/app_name"\n       android:theme="@style/AppTheme" >\n\n       <activity\n          android:name=".MainActivity"\n          android:label="@string/title_activity_main" >\n\n          <intent-filter>\n             <action android:name="android.intent.action.MAIN" />\n             <category android:name="android.intent.category.LAUNCHER"/>\n          </intent-filter>\n\n       </activity>\n\n   </application>\n</manifest>\n')])])]),e("p",[n._v("不论是 MAIN 动作还是 LAUNCHER 类别没有在活动中声明，那么应用程序的图标将不会出现在主屏幕的应用列表中。")]),n._v(" "),e("p",[n._v('让我们运行起刚刚修改的 "Hellow World!" 应用程序。假设你在环境搭建的时候已经创建了 AVD 。从 Eclipse 运行应用，打开一个项目中的活动文件，并从工具栏点击运行图片图标。Eclipse在AVD上安装应用并启动它。如果一切顺利，将显示模拟器屏幕如下，同时你可以在Eclipse IDE的LogCat窗口中看到日志信息：')]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("07-19 15:00:43.405: D/Android :(866): The onCreate() event\n07-19 15:00:43.405: D/Android :(866): The onStart() event\n07-19 15:00:43.415: D/Android :(866): The onResume() event\n")])])]),e("p",[n._v("让我们点击 Android 模拟器上的红色按钮图片，它将在Eclipse IDE的LogCat窗口中产生如下的事件消息：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("<code>07-19 15:01:10.995: D/Android :(866): The onPause() event\n07-19 15:01:12.705: D/Android :(866): The onStop() event\n</code>\n")])])]),e("p",[n._v("让我们再次点击 Android 模拟器上的菜单按钮图片，它将在 Eclipse IDE 的 LogCat 窗口中产生如下的事件消息：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("<code>07-19 15:01:13.995: D/Android :(866): The onStart() event\n07-19 15:01:14.705: D/Android :(866): The onResume() event\n</code>\n")])])]),e("p",[n._v("接下来，让我们点击Android模拟器上的返回按钮图片，它将在Eclipse IDE的LogCat窗口中产生如下的事件消息，Android 应用程序上活动的整个生命周期完成。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("07-19 15:33:15.687: D/Android :(992): The onPause() event\n07-19 15:33:15.525: D/Android :(992): The onStop() event\n07-19 15:33:15.525: D/Android :(992): The onDestroy() event\n")])])]),e("h2",{attrs:{id:"android-服务（service）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#android-服务（service）"}},[n._v("#")]),n._v(" Android 服务（Service）")]),n._v(" "),e("p",[n._v("服务是一个后台运行的组件，执行长时间运行且不需要用户交互的任务。即使应用被销毁也依然可以工作。服务基本上包含两种状态 -")]),n._v(" "),e("p",[n._v("状态\t描述\nStarted\tAndroid的应用程序组件，如活动，通过startService()启动了服务，则服务是Started状态。一旦启动，服务可以在后台无限期运行，即使启动它的组件已经被销毁。\nBound\t当Android的应用程序组件通过bindService()绑定了服务，则服务是Bound状态。Bound状态的服务提供了一个客户服务器接口来允许组件与服务进行交互，如发送请求，获取结果，甚至通过IPC来进行跨进程通信。\n服务拥有生命周期方法，可以实现监控服务状态的变化，可以在合适的阶段执行工作。下面的左图展示了当服务通过startService()被创建时的生命周期，右图则显示了当服务通过bindService()被创建时的生命周期：")]),n._v(" "),e("p",[n._v("要创建服务，你需要创建一个继承自Service基类或者它的已知子类的Java类。Service基类定义了不同的回调方法和多数重要方法。你不需要实现所有的回调方法。虽然如此，理解所有的方法还是非常重要的。实现这些回调能确保你的应用以用户期望的方式实现。")]),n._v(" "),e("p",[n._v("回调\t描述\nonStartCommand()\t其他组件(如活动)通过调用startService()来请求启动服务时，系统调用该方法。如果你实现该方法，你有责任在工作完成时通过stopSelf()或者stopService()方法来停止服务。\nonBind\t当其他组件想要通过bindService()来绑定服务时，系统调用该方法。如果你实现该方法，你需要返回IBinder对象来提供一个接口，以便客户来与服务通信。你必须实现该方法，如果你不允许绑定，则直接返回null。\nonUnbind()\t当客户中断所有服务发布的特殊接口时，系统调用该方法。\nonRebind()\t当新的客户端与服务连接，且此前它已经通过onUnbind(Intent)通知断开连接时，系统调用该方法。\nonCreate()\t当服务通过onStartCommand()和onBind()被第一次创建的时候，系统调用该方法。该调用要求执行一次性安装。\nonDestroy()\t当服务不再有用或者被销毁时，系统调用该方法。你的服务需要实现该方法来清理任何资源，如线程，已注册的监听器，接收器等。\n下面的主服务演示了每个方法的生命周期 -")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("\npackage com.runoob.androidservices;\n\nimport android.app.Service;\nimport android.os.IBinder;\nimport android.content.Intent;\nimport android.os.Bundle;\n\npublic class HelloService extends Service {\n\n    /** 标识服务如果被杀死之后的行为 */\n    int mStartMode;\n\n    /** 绑定的客户端接口 */\n    IBinder mBinder;\n\n    /** 标识是否可以使用onRebind */\n    boolean mAllowRebind;\n\n    /** 当服务被创建时调用. */\n    @Override\n    public void onCreate() {\n\n    }\n\n    /** 调用startService()启动服务时回调 */\n    @Override\n    public int onStartCommand(Intent intent, int flags, int startId) {\n        return mStartMode;\n    }\n\n    /** 通过bindService()绑定到服务的客户端 */\n    @Override\n    public IBinder onBind(Intent intent) {\n        return mBinder;\n    }\n\n    /** 通过unbindService()解除所有客户端绑定时调用 */\n    @Override\n    public boolean onUnbind(Intent intent) {\n        return mAllowRebind;\n    }\n\n    /** 通过bindService()将客户端绑定到服务时调用*/\n    @Override\n    public void onRebind(Intent intent) {\n\n    }\n\n    /** 服务不再有用且将要被销毁时调用 */\n    @Override\n    public void onDestroy() {\n\n    }\n}\n")])])]),e("p",[n._v("实例\n这个例子将通过简单地步骤为你展示如何创建自己的Android服务。按照下面的步骤来修改之前在Hello World实例章节中创建的Android应用程序:")]),n._v(" "),e("p",[n._v("步骤\t描述\n1\t使用Android Studio IDE来创建Android应用程序并在com.runoob.androidservices包下命名为androidservices。类似Hello World实例章节。\n2\t修改主活动文件MainActivity.java来添加startService()和stopService()方法。\n3\t在包com.runoob.androidservices下创建新的Java文件MyService.java。这个文件将实现Android服务相关的方法。\n4\t在AndroidManifest.xml文件中使用<service.../>标签来定义服务。应用程序可以有一个或多个服务，没有任何限制。\n5\t修改res/layout/activity_main.xml文件中的默认布局，在线性布局中包含两个按钮。\n6\t不要对res/values/strings.xml文件中的任何常量进行修改。Android Studio会注意字符串值。\n7\t启动Android模拟器来运行应用程序，并验证应用程序所做改变的结果。\n下面是主活动文件src/com.runoob.androidservices/MainActivity.java文件所修改的内容。这个文件包含所有基本的生命周期方法。我们添加了startService()和stopService()方法来启动和停止服务。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("package com.runoob.androidservices;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.view.Menu;\n\n\nimport android.content.Intent;\nimport android.view.View;\n\npublic class MainActivity extends Activity {\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.menu_main, menu);\n        return true;\n    }\n\n    // Method to start the service\n    public void startService(View view) {\n        startService(new Intent(getBaseContext(), MyService.class));\n    }\n\n    // Method to stop the service\n    public void stopService(View view) {\n        stopService(new Intent(getBaseContext(), MyService.class));\n    }\n}\n")])])]),e("p",[n._v("以下是src/com.runoob.androidservices/MyService.java的内容。这个文件可以基于需求实现一个或多个服务关联的方法。对于新人，我们只实现onStartCommand()和onDestroy() -")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('\npackage com.runoob.androidservices;\n\nimport android.app.Service;\nimport android.content.Intent;\nimport android.os.IBinder;\nimport android.widget.Toast;\n\npublic class MyService extends Service {\n\n    @Override\n    public IBinder onBind(Intent arg0) {\n        return null;\n    }\n\n    @Override\n    public int onStartCommand(Intent intent, int flags, int startId) {\n        // Let it continue running until it is stopped.\n        Toast.makeText(this, "服务已经启动", Toast.LENGTH_LONG).show();\n        return START_STICKY;\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        Toast.makeText(this, "服务已经停止", Toast.LENGTH_LONG).show();\n    }\n}\n')])])]),e("p",[n._v("下面将修改AndroidManifest.xml文件。这里添加<service.../>标签来包含我们的服务：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<?xml version="1.0" encoding="utf-8"?>\n<manifest xmlns:android="http://schemas.android.com/apk/res/android"\n    package="com.runoob.androidservices"\n    android:versionCode="1"\n    android:versionName="1.0">\n\n    <uses-sdk\n        android:minSdkVersion="13"\n        android:targetSdkVersion="22" />\n\n    <application\n        android:icon="@drawable/ic_launcher"\n        android:label="@string/app_name"\n        android:theme="@style/AppTheme" >\n\n        <activity\n            android:name=".MainActivity"\n            android:label="@string/title_activity_main" >\n\n            <intent-filter>\n                <action android:name="android.intent.action.MAIN" />\n                <category android:name="android.intent.category.LAUNCHER"/>\n            </intent-filter>\n\n        </activity>\n\n        <service android:name=".MyService" />\n\n    </application>\n\n</manifest>\n')])])]),e("p",[n._v("以下是res/layout/activity_main.xml文件的内容，包含两个按钮：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"\n    android:layout_height="match_parent" android:paddingLeft="@dimen/activity_horizontal_margin"\n    android:paddingRight="@dimen/activity_horizontal_margin"\n    android:paddingTop="@dimen/activity_vertical_margin"\n    android:paddingBottom="@dimen/activity_vertical_margin" tools:context=".MainActivity">\n\n    <TextView\n        android:id="@+id/textView1"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="Android 服务实例"\n        android:layout_alignParentTop="true"\n        android:layout_centerHorizontal="true"\n        android:textSize="30dp" />\n\n    <TextView\n        android:id="@+id/textView2"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="www.runoob.com"\n        android:textColor="#ff87ff09"\n        android:textSize="30dp"\n        android:layout_above="@+id/imageButton"\n        android:layout_centerHorizontal="true"\n        android:layout_marginBottom="40dp" />\n\n    <ImageButton\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:id="@+id/imageButton"\n        android:src="@drawable/ic_launcher"\n        android:layout_centerVertical="true"\n        android:layout_centerHorizontal="true" />\n\n    <Button\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:id="@+id/button2"\n        android:text="启动服务"\n        android:onClick="startService"\n        android:layout_below="@+id/imageButton"\n        android:layout_centerHorizontal="true" />\n\n    <Button\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="停止服务"\n        android:id="@+id/button"\n        android:onClick="stopService"\n        android:layout_below="@+id/button2"\n        android:layout_alignLeft="@+id/button2"\n        android:layout_alignStart="@+id/button2"\n        android:layout_alignRight="@+id/button2"\n        android:layout_alignEnd="@+id/button2" />\n\n</RelativeLayout>\n')])])]),e("p",[n._v("下面是res/values/strings.xml的内容，来定义两个新的常量：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<?xml version="1.0" encoding="utf-8"?>\n<resources>\n\n    <string name="app_name">Android Services</string>\n    <string name="title_activity_main">MainActivity</string>\n    <string name="menu_settings">Settings</string>\n    <string name="action_settings">Settings</string>\n\n</resources>\n')])])]),e("p",[n._v("让我们运行刚刚修改的My Application应用程序。我假设你已经在安装环境时创建了AVD。打开你的项目中的活动文件，点击工具栏中的图片图标来在Android Studio中运行应用程序。Android Studio在AVD上安装应用程序并启动它。如果一切顺利，将在模拟器窗口上显示如下：")]),n._v(" "),e("p",[n._v('现在点击"启动服务"按钮来启动服务，这将执行我们编写的onStartCommand()方法，一条"服务已经启动"的消息在模拟器的底部出现，如下：')]),n._v(" "),e("p",[n._v('点击底部的"停止服务"按钮，可以停止服务。')]),n._v(" "),e("p",[e("strong",[n._v("Android 广播接收器(Broadcast Receivers)")]),n._v("\n广播接收器用于响应来自其他应用程序或者系统的广播消息。这些消息有时被称为事件或者意图。例如，应用程序可以初始化广播来让其他的应用程序知道一些数据已经被下载到设备，并可以为他们所用。这样广播接收器可以定义适当的动作来拦截这些通信。")]),n._v(" "),e("p",[n._v("有以下两个重要的步骤来使系统的广播意图配合广播接收器工作。")]),n._v(" "),e("p",[n._v("创建广播接收器\n注册广播接收器\n还有一个附加的步骤，要实现自定义的意图，你必须创建并广播这些意图。")]),n._v(" "),e("p",[e("strong",[n._v("创建广播接收器")]),n._v("\n广播接收器需要实现为BroadcastReceiver类的子类，并重写onReceive()方法来接收以Intent对象为参数的消息。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('public class MyReceiver extends BroadcastReceiver {\n   @Override\n   public void onReceive(Context context, Intent intent) {\n      Toast.makeText(context, "Intent Detected.", Toast.LENGTH_LONG).show();\n   }\n}\n')])])]),e("p",[e("strong",[n._v("注册广播接收器")]),n._v("\n应用程序通过在AndroidManifest.xml中注册广播接收器来监听制定的广播意图。假设我们将要注册MyReceiver来监听系统产生的ACTION_BOOT_COMPLETED事件。该事件由Android系统的启动进程完成时发出。")]),n._v(" "),e("p",[n._v("广播接收器(Broadcast Receivers)")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<application\n   android:icon="@drawable/ic_launcher"\n   android:label="@string/app_name"\n   android:theme="@style/AppTheme" >\n   <receiver android:name="MyReceiver">\n\n      <intent-filter>\n         <action android:name="android.intent.action.BOOT_COMPLETED">\n         </action>\n      </intent-filter>\n\n   </receiver>\n</application>\n')])])]),e("p",[n._v("现在，无论什么时候Android设备被启动，都将被广播接收器MyReceiver所拦截，并且在onReceive()中实现的逻辑将被执行。")]),n._v(" "),e("p",[n._v("有许多系统产生的事件被定义为类Intent中的静态常量值。下面的表格列举了重要的系统事件。")]),n._v(" "),e("p",[n._v('事件常量\t描述\nandroid.intent.action.BATTERY_CHANGED\t持久的广播，包含电池的充电状态，级别和其他信息。\nandroid.intent.action.BATTERY_LOW\t标识设备的低电量条件。\nandroid.intent.action.BATTERY_OKAY\t标识电池在电量低之后，现在已经好了。\nandroid.intent.action.BOOT_COMPLETED\t在系统完成启动后广播一次。\nandroid.intent.action.BUG_REPORT\t显示报告bug的活动。\nandroid.intent.action.CALL\t执行呼叫数据指定的某人。\nandroid.intent.action.CALL_BUTTON\t用户点击"呼叫"按钮打开拨号器或者其他拨号的合适界面。\nandroid.intent.action.DATE_CHANGED\t日期发生改变。\nandroid.intent.action.REBOOT\t设备重启。')]),n._v(" "),e("p",[e("strong",[n._v("广播自定义意图")]),n._v("\n如果你想要应用程序中生成并发送自定义意图，你需要在活动类中通过sendBroadcast()来创建并发送这些意图。如果你使用sendStickyBroadcast(Intent)方法，则意图是持久的(sticky)，这意味者你发出的意图在广播完成后一直保持着。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('public void broadcastIntent(View view)\n{\n   Intent intent = new Intent();\n   intent.setAction("com.runoob.CUSTOM_INTENT");\n   sendBroadcast(intent);\n}\n')])])]),e("p",[n._v("com.runoob.CUSTOM_INTENT的意图可以像之前我们注册系统产生的意图一样被注册。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<application\n   android:icon="@drawable/ic_launcher"\n   android:label="@string/app_name"\n   android:theme="@style/AppTheme" >\n   <receiver android:name="MyReceiver">\n\n      <intent-filter>\n         <action android:name="com.runoob.CUSTOM_INTENT">\n         </action>\n      </intent-filter>\n\n   </receiver>\n</application>\n')])])]),e("p",[n._v("实例\n这个实例将解释如何创建广播接收器来拦截自定义意图。一旦你熟悉自定义意图，你可以为应用程序编程来拦截系统产生的意图。让我们按照下面的步骤来修改Hello World实例章节中我们创建的Android应用程序。")]),n._v(" "),e("p",[n._v("步骤\t描述\n1\t使用Android Studio来创建Android应用程序并命名为broadcastreceiver，并放在Hello World实例章节中的com.runoob.broadcastreceiver包下。\n2\t修改主要活动文件MainActivity.java来添加broadcastIntent()方法。\n3\t在com.runoob.broadcastreceiver包下创建名为MyReceiver.java的新的Java文件来定义广播接收器。\n4\t应用程序可以处理一个或多个自定义或者系统的意图，没有任何限制。每个你想拦截的意图都需要使用<receiver.../>标签在AndroidManifest.xml中注册。\n5\t修改res/layout/activity_main.xml文件中的默认内容来包含一个广播意图的按钮。\n6\t不需要修改字符串文件，Android Studio会注意string.xml文件。\n7\t启动Android模拟器来运行应用程序，并验证应用程序所做改变的结果。\n下面是修改的主要活动文件src/com.runoob.broadcastreceiver/MainActivity.java的内容。这个文件包含了每个基础的生命周期方法。我们添加了broadcastIntent()方法来广播自定义事件。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('package com.runoob.broadcastreceiver;\n\nimport android.os.Bundle;\nimport android.app.Activity;\nimport android.view.Menu;\nimport android.content.Intent;\nimport android.view.View;\n\npublic class MainActivity extends Activity {\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.menu_main, menu);\n        return true;\n    }\n\n    // 广播自定义意图\n    public void broadcastIntent(View view){\n        Intent intent = new Intent();\n        intent.setAction("cn.programmer.CUSTOM_INTENT");\n        sendBroadcast(intent);\n    }\n}\n')])])]),e("p",[n._v("下面是src/com.runoob.broadcastreceiver/MyReceiver.java的内容：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('package com.runoob.broadcastreceiver;\n\nimport android.content.BroadcastReceiver;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.widget.Toast;\n\npublic class MyReceiver extends BroadcastReceiver {\n    @Override\n    public void onReceive(Context context, Intent intent) {\n        Toast.makeText(context, "检测到意图。", Toast.LENGTH_LONG).show();\n    }\n}\n')])])]),e("p",[n._v("接下来修改AndroidManifest.xml文件。这里通过添加<receiver.../>标签来包含我们的广播接收器：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<?xml version="1.0" encoding="utf-8"?>\n<manifest xmlns:android="http://schemas.android.com/apk/res/android"\n    package="com.runoob.broadcastreceiver"\n    android:versionCode="1"\n    android:versionName="1.0" >\n\n    <uses-sdk\n        android:minSdkVersion="8"\n        android:targetSdkVersion="22" />\n\n    <application\n        android:icon="@drawable/ic_launcher"\n        android:label="@string/app_name"\n        android:theme="@style/AppTheme" >\n\n        <activity\n            android:name=".MainActivity"\n            android:label="@string/title_activity_main" >\n\n            <intent-filter>\n                <action android:name="android.intent.action.MAIN" />\n                <category android:name="android.intent.category.LAUNCHER"/>\n            </intent-filter>\n\n        </activity>\n\n        <receiver android:name="MyReceiver">\n\n            <intent-filter>\n                <action android:name="cn.programmer.CUSTOM_INTENT">\n                </action>\n            </intent-filter>\n\n        </receiver>\n\n    </application>\n\n</manifest>\n')])])]),e("p",[n._v("下面是res/layout/activity_main.xml文件的内容，包含广播自定义意图的按钮。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"\n    android:layout_height="match_parent" android:paddingLeft="@dimen/activity_horizontal_margin"\n    android:paddingRight="@dimen/activity_horizontal_margin"\n    android:paddingTop="@dimen/activity_vertical_margin"\n    android:paddingBottom="@dimen/activity_vertical_margin" tools:context=".MainActivity">\n\n    <TextView\n        android:id="@+id/textView1"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="广播实例"\n        android:layout_alignParentTop="true"\n        android:layout_centerHorizontal="true"\n        android:textSize="30dp" />\n\n    <TextView\n        android:id="@+id/textView2"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="www.runoob.com"\n        android:textColor="#ff87ff09"\n        android:textSize="30dp"\n        android:layout_above="@+id/imageButton"\n        android:layout_centerHorizontal="true"\n        android:layout_marginBottom="40dp" />\n\n    <ImageButton\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:id="@+id/imageButton"\n        android:src="@drawable/ic_launcher"\n        android:layout_centerVertical="true"\n        android:layout_centerHorizontal="true" />\n\n    <Button\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:id="@+id/button2"\n        android:text="广播意图"\n        android:onClick="broadcastIntent"\n        android:layout_below="@+id/imageButton"\n        android:layout_centerHorizontal="true" />\n\n</RelativeLayout>\n')])])]),e("p",[n._v("下面是res/values/strings.xml文件的内容，定义了两个新的常量。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<?xml version="1.0" encoding="utf-8"?>\n<resources>\n\n    <string name="app_name">Android Broadcast Receiver</string>\n    <string name="action_settings">Settings</string>\n    <string name="menu_settings">Settings</string>\n    <string name="title_activity_main">Main Activity</string>\n\n</resources>\n')])])]),e("p",[n._v("让我们运行刚刚修改的Hello World!应用程序。我假设你已经在安装环境时创建了AVD。打开你的项目中的活动文件，点击工具栏中的图片图标来在Android Studio中运行应用程序。Android Studio在AVD上安装应用程序并启动它。如果一切顺利，将在模拟器窗口上显示如下：")]),n._v(" "),e("p",[n._v('现在点击"广播意图"按钮来广播我们的自定义意图。这将广播我们的自定义意图"cn.programmer.CUSTOM_INTENT"，在我们注册的广播接收器MyReceiver中拦截并执行我们实现的逻辑。模拟器的底部将出现toast。如下：')]),n._v(" "),e("p",[n._v("你可以尝试实现其他的广播接收器来拦截系统产生的意图，如系统启动，日期改变和低电量等。")]),n._v(" "),e("h2",{attrs:{id:"android-内容提供者-content-provider"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#android-内容提供者-content-provider"}},[n._v("#")]),n._v(" Android - 内容提供者(Content Provider)")]),n._v(" "),e("p",[n._v("内容提供者组件通过请求从一个应用程序向其他的应用程序提供数据。这些请求由类 ContentResolver 的方法来处理。内容提供者可以使用不同的方式来存储数据。数据可以被存放在数据库，文件，甚至是网络。")]),n._v(" "),e("p",[n._v("有时候需要在应用程序之间共享数据。这时内容提供者变得非常有用。")]),n._v(" "),e("p",[n._v("内容提供者可以让内容集中，必要时可以有多个不同的应用程序来访问。内容提供者的行为和数据库很像。你可以查询，编辑它的内容，使用 insert()， update()， delete() 和 query() 来添加或者删除内容。多数情况下数据被存储在 SQLite 数据库。")]),n._v(" "),e("p",[n._v("内容提供者被实现为类 ContentProvider 类的子类。需要实现一系列标准的 API，以便其他的应用程序来执行事务。")]),n._v(" "),e("p",[n._v("public class MyApplication extends  ContentProvider {")]),n._v(" "),e("p",[n._v("}")]),n._v(" "),e("p",[e("strong",[n._v("内容URI")]),n._v("\n要查询内容提供者，你需要以如下格式的URI的形式来指定查询字符串：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("<prefix>://<authority>/<data_type>/<id>\n")])])]),e("p",[n._v("以下是URI中各部分的具体说明：")]),n._v(" "),e("p",[n._v("部分\t说明\nprefix\t前缀：一直被设置为content://\nauthority\t授权：指定内容提供者的名称，例如联系人，浏览器等。第三方的内容提供者可以是全名，如：cn.programmer.statusprovider\ndata_type\t数据类型：这个表明这个特殊的内容提供者中的数据的类型。例如：你要通过内容提供者Contacts来获取所有的通讯录，数据路径是people，那么URI将是下面这样：content://contacts/people\nid\t这个指定特定的请求记录。例如：你在内容提供者Contacts中查找联系人的ID号为5，那么URI看起来是这样：content://contacts/people/5")]),n._v(" "),e("p",[e("strong",[n._v("创建内容提供者")]),n._v("\n这里描述创建自己的内容提供者的简单步骤。")]),n._v(" "),e("p",[n._v("首先，你需要继承类 ContentProviderbase 来创建一个内容提供者类。\n其次，你需要定义用于访问内容的你的内容提供者URI地址。\n接下来，你需要创建数据库来保存内容。通常，Android 使用 SQLite 数据库，并在框架中重写 onCreate() 方法来使用 SQLiteOpenHelper 的方法创建或者打开提供者的数据库。当你的应用程序被启动，它的每个内容提供者的 onCreate() 方法将在应用程序主线程中被调用。\n最后，使用<provider.../>标签在 AndroidManifest.xml 中注册内容提供者。\n以下是让你的内容提供者正常工作，你需要在类 ContentProvider 中重写的一些方法：")]),n._v(" "),e("p",[n._v("onCreate():当提供者被启动时调用。\nquery():该方法从客户端接受请求。结果是返回指针(Cursor)对象。\ninsert():该方法向内容提供者插入新的记录。\ndelete():该方法从内容提供者中删除已存在的记录。\nupdate():该方法更新内容提供者中已存在的记录。\ngetType():该方法为给定的URI返回元数据类型。\n实例\n该实例解释如何创建自己的内容提供者。让我们按照下面的步骤：")]),n._v(" "),e("p",[n._v("步骤\t描述\n1\t使用 Android Studio 创建 Android 应用程序并命名为 Content Provider，在包com.runoob.contentprovider 下，并建立空活动。\n2\t修改主要活动文件 MainActivity.java 来添加两个新的方法 onClickAddName() 和 onClickRetrieveStudents()。\n3\t在包 com.runoob.contentprovider 下创建新的 Java 文件 StudentsProvider.java 来定义实际的提供者，并关联方法。\n4\t使用<provider.../>标签在 AndroidManifest.xml 中注册内容提供者。\n5\t修改 res/layout/activity_main.xml 文件的默认内容来包含添加学生记录的简单界面。\n6\t无需修改 strings.xml，Android Studio 会注意 strings.xml 文件。\n7\t启动 Android 模拟器来运行应用程序，并验证应用程序所做改变的结果。\n下面是修改的主要活动文件 src/com.runoob.contentprovider/MainActivity.java 的内容。该文件包含每个基础的生命周期方法。我们添加了两个新的方法，onClickAddName() 和 onClickRetrieveStudents() 来让应用程序处理用户交互。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('package com.runoob.contentprovider;\n\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.app.Activity;\nimport android.content.ContentValues;\nimport android.content.CursorLoader;\nimport android.database.Cursor;\nimport android.view.Menu;\nimport android.view.View;\nimport android.widget.EditText;\nimport android.widget.Toast;\nimport com.runoob.contentprovider.R;\n\npublic class MainActivity extends Activity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.menu_main, menu);\n        return true;\n    }\n\n    public void onClickAddName(View view) {\n        // Add a new student record\n        ContentValues values = new ContentValues();\n\n        values.put(StudentsProvider.NAME,\n                ((EditText)findViewById(R.id.editText2)).getText().toString());\n\n        values.put(StudentsProvider.GRADE,\n                ((EditText)findViewById(R.id.editText3)).getText().toString());\n\n        Uri uri = getContentResolver().insert(\n                StudentsProvider.CONTENT_URI, values);\n\n        Toast.makeText(getBaseContext(),\n                uri.toString(), Toast.LENGTH_LONG).show();\n    }\n\n    public void onClickRetrieveStudents(View view) {\n\n        // Retrieve student records\n        String URL = "content://com.example.provider.College/students";\n\n        Uri students = Uri.parse(URL);\n        Cursor c = managedQuery(students, null, null, null, "name");\n\n        if (c.moveToFirst()) {\n            do{\n                Toast.makeText(this,\n                        c.getString(c.getColumnIndex(StudentsProvider._ID)) +\n                                ", " +  c.getString(c.getColumnIndex( StudentsProvider.NAME)) +\n                                ", " + c.getString(c.getColumnIndex( StudentsProvider.GRADE)),\n                        Toast.LENGTH_SHORT).show();\n            } while (c.moveToNext());\n        }\n    }\n}\n')])])]),e("p",[n._v("在包com.runoob.contentprovider下创建新的文件StudentsProvider.java。以下是src/com.runoob.contentprovider/StudentsProvider.java的内容。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('\npackage com.runoob.contentprovider;\n\nimport java.util.HashMap;\n\nimport android.content.ContentProvider;\nimport android.content.ContentUris;\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.content.UriMatcher;\n\nimport android.database.Cursor;\nimport android.database.SQLException;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteOpenHelper;\nimport android.database.sqlite.SQLiteQueryBuilder;\n\nimport android.net.Uri;\nimport android.text.TextUtils;\n\npublic class StudentsProvider extends ContentProvider {\n\n    static final String PROVIDER_NAME = "com.example.provider.College";\n    static final String URL = "content://" + PROVIDER_NAME + "/students";\n    static final Uri CONTENT_URI = Uri.parse(URL);\n\n    static final String _ID = "_id";\n    static final String NAME = "name";\n    static final String GRADE = "grade";\n\n    private static HashMap<String, String> STUDENTS_PROJECTION_MAP;\n\n    static final int STUDENTS = 1;\n    static final int STUDENT_ID = 2;\n\n    static final UriMatcher uriMatcher;\n    static{\n        uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);\n        uriMatcher.addURI(PROVIDER_NAME, "students", STUDENTS);\n        uriMatcher.addURI(PROVIDER_NAME, "students/#", STUDENT_ID);\n    }\n\n    /**\n     * 数据库特定常量声明\n     */\n    private SQLiteDatabase db;\n    static final String DATABASE_NAME = "College";\n    static final String STUDENTS_TABLE_NAME = "students";\n    static final int DATABASE_VERSION = 1;\n    static final String CREATE_DB_TABLE =\n            " CREATE TABLE " + STUDENTS_TABLE_NAME +\n                    " (_id INTEGER PRIMARY KEY AUTOINCREMENT, " +\n                    " name TEXT NOT NULL, " +\n                    " grade TEXT NOT NULL);";\n\n    /**\n     * 创建和管理提供者内部数据源的帮助类.\n     */\n    private static class DatabaseHelper extends SQLiteOpenHelper {\n        DatabaseHelper(Context context){\n            super(context, DATABASE_NAME, null, DATABASE_VERSION);\n        }\n\n        @Override\n        public void onCreate(SQLiteDatabase db)\n        {\n            db.execSQL(CREATE_DB_TABLE);\n        }\n\n        @Override\n        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n            db.execSQL("DROP TABLE IF EXISTS " +  STUDENTS_TABLE_NAME);\n            onCreate(db);\n        }\n    }\n\n    @Override\n    public boolean onCreate() {\n        Context context = getContext();\n        DatabaseHelper dbHelper = new DatabaseHelper(context);\n\n        /**\n         * 如果不存在，则创建一个可写的数据库。\n         */\n        db = dbHelper.getWritableDatabase();\n        return (db == null)? false:true;\n    }\n\n    @Override\n    public Uri insert(Uri uri, ContentValues values) {\n        /**\n         * 添加新学生记录\n         */\n        long rowID = db.insert( STUDENTS_TABLE_NAME, "", values);\n\n        /**\n         * 如果记录添加成功\n         */\n\n        if (rowID > 0)\n        {\n            Uri _uri = ContentUris.withAppendedId(CONTENT_URI, rowID);\n            getContext().getContentResolver().notifyChange(_uri, null);\n            return _uri;\n        }\n        throw new SQLException("Failed to add a record into " + uri);\n    }\n\n    @Override\n    public Cursor query(Uri uri, String[] projection, String selection,String[] selectionArgs, String sortOrder) {\n        SQLiteQueryBuilder qb = new SQLiteQueryBuilder();\n        qb.setTables(STUDENTS_TABLE_NAME);\n\n        switch (uriMatcher.match(uri)) {\n            case STUDENTS:\n                qb.setProjectionMap(STUDENTS_PROJECTION_MAP);\n                break;\n\n            case STUDENT_ID:\n                qb.appendWhere( _ID + "=" + uri.getPathSegments().get(1));\n                break;\n\n            default:\n                throw new IllegalArgumentException("Unknown URI " + uri);\n        }\n\n        if (sortOrder == null || sortOrder == ""){\n            /**\n             * 默认按照学生姓名排序\n             */\n            sortOrder = NAME;\n        }\n        Cursor c = qb.query(db, projection, selection, selectionArgs,null, null, sortOrder);\n\n        /**\n         * 注册内容URI变化的监听器\n         */\n        c.setNotificationUri(getContext().getContentResolver(), uri);\n        return c;\n    }\n\n    @Override\n    public int delete(Uri uri, String selection, String[] selectionArgs) {\n        int count = 0;\n\n        switch (uriMatcher.match(uri)){\n            case STUDENTS:\n                count = db.delete(STUDENTS_TABLE_NAME, selection, selectionArgs);\n                break;\n\n            case STUDENT_ID:\n                String id = uri.getPathSegments().get(1);\n                count = db.delete( STUDENTS_TABLE_NAME, _ID +  " = " + id +\n                        (!TextUtils.isEmpty(selection) ? " AND (" + selection + \')\' : ""), selectionArgs);\n                break;\n\n            default:\n                throw new IllegalArgumentException("Unknown URI " + uri);\n        }\n\n        getContext().getContentResolver().notifyChange(uri, null);\n        return count;\n    }\n\n    @Override\n    public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {\n        int count = 0;\n\n        switch (uriMatcher.match(uri)){\n            case STUDENTS:\n                count = db.update(STUDENTS_TABLE_NAME, values, selection, selectionArgs);\n                break;\n\n            case STUDENT_ID:\n                count = db.update(STUDENTS_TABLE_NAME, values, _ID + " = " + uri.getPathSegments().get(1) +\n                        (!TextUtils.isEmpty(selection) ? " AND (" +selection + \')\' : ""), selectionArgs);\n                break;\n\n            default:\n                throw new IllegalArgumentException("Unknown URI " + uri );\n        }\n        getContext().getContentResolver().notifyChange(uri, null);\n        return count;\n    }\n\n    @Override\n    public String getType(Uri uri) {\n        switch (uriMatcher.match(uri)){\n            /**\n             * 获取所有学生记录\n             */\n            case STUDENTS:\n                return "vnd.android.cursor.dir/vnd.example.students";\n\n            /**\n             * 获取一个特定的学生\n             */\n            case STUDENT_ID:\n                return "vnd.android.cursor.item/vnd.example.students";\n\n            default:\n                throw new IllegalArgumentException("Unsupported URI: " + uri);\n        }\n    }\n}\n')])])]),e("p",[n._v("以下是修改后的AndroidManifest.xml文件。这里添加了<provider.../>标签来包含我们的内容提供者：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<?xml version="1.0" encoding="utf-8"?>\n<manifest xmlns:android="http://schemas.android.com/apk/res/android"\n    package="com.runoob.contentprovider"\n    android:versionCode="1"\n    android:versionName="1.0" >\n\n    <uses-sdk\n        android:minSdkVersion="8"\n        android:targetSdkVersion="22" />\n\n    <application\n        android:allowBackup="true"\n        android:icon="@drawable/ic_launcher"\n        android:label="@string/app_name"\n        android:theme="@style/AppTheme" >\n\n        <activity\n            android:name="com.runoob.contentprovider.MainActivity"\n            android:label="@string/app_name" >\n\n            <intent-filter>\n                <action android:name="android.intent.action.MAIN" />\n                <category android:name="android.intent.category.LAUNCHER" />\n            </intent-filter>\n\n        </activity>\n\n        <provider android:name="StudentsProvider"\n            android:authorities="com.example.provider.College" >\n        </provider>\n\n    </application>\n\n</manifest>\n')])])]),e("p",[n._v("下面是res/layout/activity_main.xml文件的内容：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"\n    android:layout_height="match_parent" android:paddingLeft="@dimen/activity_horizontal_margin"\n    android:paddingRight="@dimen/activity_horizontal_margin"\n    android:paddingTop="@dimen/activity_vertical_margin"\n    android:paddingBottom="@dimen/activity_vertical_margin" tools:context=".MainActivity">\n\n    <TextView\n        android:id="@+id/textView1"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="内容提供者实例"\n        android:layout_alignParentTop="true"\n        android:layout_centerHorizontal="true"\n        android:textSize="30dp" />\n\n    <TextView\n        android:id="@+id/textView2"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="www.runoob.com"\n        android:textColor="#ff87ff09"\n        android:textSize="30dp"\n        android:layout_below="@+id/textView1"\n        android:layout_centerHorizontal="true" />\n\n    <ImageButton\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:id="@+id/imageButton"\n        android:src="@drawable/ic_launcher"\n        android:layout_below="@+id/textView2"\n        android:layout_centerHorizontal="true" />\n\n    <Button\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:id="@+id/button2"\n        android:text="添加"\n        android:layout_below="@+id/editText3"\n        android:layout_alignRight="@+id/textView2"\n        android:layout_alignEnd="@+id/textView2"\n        android:layout_alignLeft="@+id/textView2"\n        android:layout_alignStart="@+id/textView2"\n        android:onClick="onClickAddName"/>\n\n    <EditText\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:id="@+id/editText"\n        android:layout_below="@+id/imageButton"\n        android:layout_alignRight="@+id/imageButton"\n        android:layout_alignEnd="@+id/imageButton" />\n\n    <EditText\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:id="@+id/editText2"\n        android:layout_alignTop="@+id/editText"\n        android:layout_alignLeft="@+id/textView1"\n        android:layout_alignStart="@+id/textView1"\n        android:layout_alignRight="@+id/textView1"\n        android:layout_alignEnd="@+id/textView1"\n        android:hint="姓名"\n        android:textColorHint="@android:color/holo_blue_light" />\n\n    <EditText\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:id="@+id/editText3"\n        android:layout_below="@+id/editText"\n        android:layout_alignLeft="@+id/editText2"\n        android:layout_alignStart="@+id/editText2"\n        android:layout_alignRight="@+id/editText2"\n        android:layout_alignEnd="@+id/editText2"\n        android:hint="年级"\n        android:textColorHint="@android:color/holo_blue_bright" />\n\n    <Button\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="查询"\n        android:id="@+id/button"\n        android:layout_below="@+id/button2"\n        android:layout_alignRight="@+id/editText3"\n        android:layout_alignEnd="@+id/editText3"\n        android:layout_alignLeft="@+id/button2"\n        android:layout_alignStart="@+id/button2"\n        android:onClick="onClickRetrieveStudents"/>\n\n</RelativeLayout>\n确保res/values/strings.xml文件中有以下内容：\n\n<?xml version="1.0" encoding="utf-8"?>\n<resources>\n\n    <string name="app_name">Content Provider</string>\n    <string name="action_settings">Settings</string>\n\n</resources>\n')])])]),e("p",[n._v("让我们运行刚刚修改的 Content Provider 应用程序。我假设你已经在安装环境时创建了 AVD。打开你的项目中的活动文件，点击工具栏中的图片图标来在 Android Studio 中运行应用程序。Android Studio 在 AVD 上安装应用程序并启动它。如果一切顺利，将在模拟器窗口上显示如下：")]),n._v(" "),e("p",[n._v('输入姓名和年级，并点击"添加"按钮，这将在数据中添加一条学生记录，并在底部删除一条信息。信息内容显示包含添加进数据库的记录数的内容提供者URI。这个操作使用了insert()方法。重复这个过程在我们的内容提供者的数据库中添加更多的学生。')]),n._v(" "),e("p",[n._v('一旦你完成数据库记录的添加，是时候向内容提供者要求给回这些记录。点击"查询"按钮，这将通过实现的 query() 方法来获取并显示所有的数据记录。')]),n._v(" "),e("p",[n._v("你可以在 MainActivity.java 中提供回调方法，来编写更新和删除的操作，并修改用户界面来添加更新和删除操作。")]),n._v(" "),e("p",[n._v("你可以通过这种方式使用已有的内容提供者，如通讯录。你也可以通过这种方式来开发一个优秀的面向数据库的应用，你可以像上面介绍的实例那样来执行素有的数据库操作，如读、写、更新和删除。")]),n._v(" "),e("h2",{attrs:{id:"android-碎片-fragment"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#android-碎片-fragment"}},[n._v("#")]),n._v(" Android 碎片(Fragment)")]),n._v(" "),e("p",[n._v("碎片是活动的一部分，使得活动更加的模块化设计。我们可以认为碎片是一种子活动。")]),n._v(" "),e("p",[n._v("下面是关于碎片的重要知识点 -")]),n._v(" "),e("p",[n._v("碎片拥有自己的布局，自己的行为及自己的生命周期回调。\n当活动在运行的时候，你可以在活动中添加或者移除碎片。\n你可以合并多个碎片在一个单一的活动中来构建多栏的UI。\n碎片可以被用在多个活动中。\n碎片的生命周期和它的宿主活动紧密关联。这意味着活动被暂停，所有活动中的碎片被停止。\n碎片可以实现行为而没有用户界面组件。\n碎片是 Android API 版本11中被加入到 Android API。\n通过继承 Fragment 类来创建碎片。可以通过使用 元素在活动的布局文件中声明碎片来在你的活动中插入碎片。")]),n._v(" "),e("p",[n._v("在引入碎片之前，由于每次给定的一个时间点在屏幕上只能显示单一的活动，因此我们有一个局限。我们无法分割设备屏幕并且独立的控制不同的部分。伴随着碎片的引入，我们获得了更大的灵活性，并使得一个时间点只能在屏幕上有一个单一活动的限制被移除。现在我们可以有单一的活动，但每个活动由多个碎片组装，每个碎片有自己的布局，事件和完整的生命周期。")]),n._v(" "),e("p",[n._v("下面是一个典型的示例演示如何让两个由碎片定义的UI模块，在为平板设计的活动中组合，在为手持设备设计的活动中分离。")]),n._v(" "),e("p",[n._v("当运行在在平板尺寸的设备上，这个应用程序可以在活动A中嵌入两个碎片。在手机设备屏幕上，由于没有足够的空间，活动A仅包含有文章列表的碎片，当用户点击文章时，启动包含第二个碎片的活动B来阅读文章。")]),n._v(" "),e("p",[e("strong",[n._v("碎片的生命周期")]),n._v("\nAndroid 的碎片拥有自己的生命周期，与 Android 的活动很相似。下面简单介绍它生命周期的不同阶段。")]),n._v(" "),e("p",[n._v("这是在类fragment中你可以重写的方法列表：")]),n._v(" "),e("p",[n._v("onAttach(): 碎片实例被关联到活动实例。碎片和活动还没有完全初始化。通常，你在该方法中获取到活动的引用，在碎片将来的初始化工作中被使用。\nonCreate(): 当创建碎片时，系统调用该方法。你需要初始化一些碎片的必要组件。这些组件是当碎片被暂停、停止时需要保留的，以便被恢复。\nonCreateView(): 当碎片将要第一次绘制它的用户界面时系统调用该方法。为了绘制碎片的UI，你需要从该方法中返回一个代表碎片根布局的View组件。如果该碎片不提供用户界面，直接返回null。\nonActivityCreated: 当宿主活动被创建，在onCreateView()方法之后调用该方法。活动和碎片实例与活动的视图层级被创建。这时，视图可以通过findViewById()方法来访问。在这个方法中，你可以实例化需要Context对象的对象。\nonStart(): 碎片可见时调用该方法。\nonResume(): 碎片可交互时调用该方法。\nonPause(): 当首次表明用户将要离开碎片时系统调用该方法。通常，这里你需要提交任何的会超出用户会话的持久化的变化。\nonStop(): 碎片将要被停止时调用。\nonDestroyView(): 调用该方法后，碎片将要被销毁。\nonDestroy(): 该方法被用来清理碎片的状态。但在Android平台并不保证一定被调用。")]),n._v(" "),e("p",[e("strong",[n._v("如何使用碎片？")]),n._v("\n这里介绍创建碎片的简单步骤。")]),n._v(" "),e("p",[n._v("首先决定在活动中需要使用多少个碎片。例如，我们需要使用两个碎片来处理设备的横屏和竖屏两种模式。\n下一步，基于碎片数量，创建继承自类Fragment的类。类Fragment包含上面提到的回调函数。根据你的需求重写任意的方法。\n对应每个片段，你需要在XML文件中创建布局。这些文件中包含已定义的碎片的布局。\n最后，基于需求修改活动文件来定义实际的碎片替换逻辑。")]),n._v(" "),e("p",[e("strong",[n._v("碎片类型")]),n._v("\n基本的碎片可以分为如下所示的三种：")]),n._v(" "),e("p",[n._v("单帧碎片 - 单帧碎片被如移动电话之类的手持设备使用。一个碎片如同一个视频一样显示。\n列表碎片 - 包含有特殊列表视图的碎片被叫做列表碎片。\n碎片过渡 - 与碎片事务一起使用。可以从一个碎片移动到另外一个碎片。")]),n._v(" "),e("h2",{attrs:{id:"android-意图-intent-和过滤器-filter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#android-意图-intent-和过滤器-filter"}},[n._v("#")]),n._v(" Android 意图(Intent)和过滤器(Filter)")]),n._v(" "),e("p",[n._v("Android意图是一个要执行的操作的抽象描述。它可以通过 startActivity 来启动一个活动，broadcastIntent 来发送广播到任何对它感兴趣的广播接受器组件，startService(Intent) 或者bindService(Intent， ServiceConnection, int) 来与后台服务通讯。")]),n._v(" "),e("p",[n._v("意图本身（一个 Intent 对象）是一个被动的数据结构，保存着要执行操作的抽象描述。")]),n._v(" "),e("p",[n._v("例如，你有一个活动，需要打开邮件客户端并通过 Android 设备来发送邮件。为了这个目的，你的活动需要发送一个带有合适选择器的 ACTION_SEND 到 Android 意图处理者。指定的选择器给定合适的界面来让用户决定如何发送他的邮件数据。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('Intent email = new Intent(Intent.ACTION_SEND, Uri.parse("mailto:"));\nemail.putExtra(Intent.EXTRA_EMAIL, recipients);\nemail.putExtra(Intent.EXTRA_SUBJECT, subject.getText().toString());\nemail.putExtra(Intent.EXTRA_TEXT, body.getText().toString());\nstartActivity(Intent.createChooser(email, "Choose an email client from..."));\n')])])]),e("p",[n._v("上面的语法调用 startActivity 方法来开启邮件活动，代码运行结果看起来像这样：")]),n._v(" "),e("p",[n._v("例如，你有一个活动，需要在 Android 设备上通过浏览器打开一个URL。为了这个目的，你的活动发送 ACTION_WEB_SEARCH 意图到 Android 意图处理器来在浏览器中打开给定的 URL 。意图处理器通过解析一系列活动，并选择最适合你的意图的一个活动，在这个例子中，是 Web 浏览器活动。意图处理器传递你的网页地址到 Web 浏览器，并打开 Web 浏览器活动。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('String q = "https://www.runoob.com";\nIntent intent = new Intent(Intent.ACTION_WEB_SEARCH );\nintent.putExtra(SearchManager.QUERY, q);\nstartActivity(intent);\n')])])]),e("p",[n._v('上面的例子将在Android搜索引擎上查找"www.runoob.com"，并在一个活动上给出关键词的结果。')]),n._v(" "),e("p",[n._v("对于每一个组件-活动，服务，广播接收器都有独立的机制来传递意图。")]),n._v(" "),e("p",[n._v("序号\t方法和描述\n1\tContext.startActivity():意图传递给该方法，用于启动一个新的活动或者让已存在的活动做一些新的事情。\n2\tContext.startService():意图传递给该方法，将初始化一个服务，或者新的信息到一个持续存在的服务。\n3\tContext.sendBroadcast():意图传递给该方法，信息将传递到所有对此感兴趣的广播接收器。")]),n._v(" "),e("p",[e("strong",[n._v("意图对象")]),n._v("\n意图对象是一包的信息，用于组件接收到的意图就像 Android 系统接受到的信息。")]),n._v(" "),e("p",[n._v("意图对象包括如下的组件，具体取决于要通信或者执行什么。")]),n._v(" "),e("p",[e("strong",[n._v("动作(Action)")]),n._v("\n这是意图对象中必须的部分，被表现为一个字符串。在广播的意图中，动作一旦发生，将会被报告。动作将很大程度上决定意图的其他部分如何被组织。Intent 类定义了一系列动作常量对应不同的意图。这里是一份Android意图标准动作 列表。")]),n._v(" "),e("p",[n._v("意图对象中的动作可以通过 setAction() 方法来设置，通过 getAction() 方法来读取。")]),n._v(" "),e("p",[e("strong",[n._v("数据(Data)")]),n._v("\n添加数据规格到意图过滤器。这个规格可以只是一个数据类型(如元类型属性)，一条 URI ，或者同时包括数据类型和 URI 。 URI 则由不同部分的属性来指定。")]),n._v(" "),e("p",[n._v("这些指定 URL 格式的属性是可选的，但是也相互独立 -")]),n._v(" "),e("p",[n._v("如果意图过滤器没有指定模式，所有其他的 URI 属性将被忽略。\n如果没有为过滤器指定主机，端口属性和所有路径属性将被忽略。\nsetData() 方法只能以 URI 来指定数据，setType() 只能以元类型指定数据，setDataAndType() 可以同时指定 URI 和元类型。URI 通过 getData() 读取，类型通过 getType() 读取。")]),n._v(" "),e("p",[n._v("以下是动作/数据组的一些实例 -")]),n._v(" "),e("p",[n._v("序号\t动作/数据组和描述\n1\tACTION_VIEW content://contacts/people/1：显示ID为1的用户的信息。\n2\tACTION_DIAL content://contacts/people/1：显示电话拨号器，并填充用户1的数据。\n3\tACTION_VIEW tel:123：显示电话拨号器，并填充给定的号码。\n4\tACTION_DIAL tel:123：显示电话拨号器，并填充给定的号码。\n5\tACTION_EDIT content://contacts/people/1：编辑ID为1的用户信息。\n6\tACTION_VIEW content://contacts/people/：显示用户列表，以便查看。\n7\tACTION_SET_WALLPAPER：显示选择壁纸设置。\n8\tACTION_SYNC：同步数据，默认的值为：android.intent.action.SYNC\n9\tACTION_SYSTEM_TUTORIAL：开启平台定义的教程（默认教程或者启动教程）\n10\tACTION_TIMEZONE_CHANGED：当时区被改变时通知\n11\tACTION_UNINSTALL_PACKAGE：运行默认的卸载器")]),n._v(" "),e("p",[e("strong",[n._v("类别")]),n._v("\n类别是意图中可选的部分，是一个字符串，包含该类型组件需要处理的意图的附加信息。addCategory() 方法为意图对象添加类别，removeCategory() 方法删除之前添加的类别，getCategories() 获取所有被设置到意图对象中的类别。这里是Android意图标准类别列表。")]),n._v(" "),e("p",[n._v("可以查看下面章节中的意图过滤器来了解我们如何使用类别来通过对应的意图选择合适的活动。")]),n._v(" "),e("p",[e("strong",[n._v("附加数据")]),n._v("\n这是传递给需要处理意图的组件的以键值对描述的附加信息。通过 putExtras() 方法设置，getExtras() 方法读取。这里是Android意图标准附加数据列表。")]),n._v(" "),e("p",[e("strong",[n._v("标记")]),n._v("\n这些标记是意图的可选部分，说明Android系统如何来启动活动，启动后如何处理等。")]),n._v(" "),e("p",[n._v('序号\t标记和说明\n1\tFLAG_ACTIVITY_CLEAR_TASK :如果在意图中设置，并通过 Context.startActivity 传递，这个标记将导致与该活动相关联的所有已存在的任务在活动启动前被清空。活动将成为一个空任务的根，所有旧的活动被结束。该标记可以与 FLAG_ACTIVITY_NEW_TASK 结合使用。\n2\tFLAG_ACTIVITY_CLEAR_TOP :如果设置该标记，活动将在当前运行的任务中被启动。这病不会启动一个新的活动实例，所有的在它之上的活动被关闭，这个意图作为一个新的意图被传递到已有的（目前在顶部的）活动。\n3\tFLAG_ACTIVITY_NEW_TASK :这个标记一般用于使得活动用于"启动器"风格的行为：为用户提供一个可以独立完成运行的数据，并启动完整儿独立的活动。')]),n._v(" "),e("p",[e("strong",[n._v("组件名称")]),n._v("\n组件名称对象是一个可选的域，代表活动、服务或者广播接收器类。如果设置，则意图对象被传递到实现设计好的类的实例，否则，Android 使用其他意图中的其他信息来定位一个合适的目标。组件名称通过 setComponent()，setClass()或者 setClassName() 来设置，通过 getComponent() 获取。")]),n._v(" "),e("p",[e("strong",[n._v("意图的类型")]),n._v("\nAndroid 支持两种类型的意图。")]),n._v(" "),e("p",[e("strong",[n._v("显式意图")]),n._v("\n显式意图用于连接应用程序的内部世界，假设你需要连接一个活动到另外一个活动，我们可以通过显示意图，下图显示通过点击按钮连接第一个活动到第二个活动。")]),n._v(" "),e("p",[n._v("这些意图通过名称指定目标组件，一般用于应用程序内部信息 - 比如一个活动启动一个下属活动或者启动一个兄弟活动。举个例子：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 通过指定类名的显式意图\nIntent i = new Intent(FirstActivity.this, SecondAcitivity.class);\n\n// 启动目标活动\nstartActivity(i);\n")])])]),e("p",[e("strong",[n._v("隐式意图")]),n._v("\n这些意图没有为目标命名，组件名称的域为空。隐式意图经常用于激活其他应用程序的组件。举个例子：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("Intent read1=new Intent();\nread1.setAction(android.content.Intent.ACTION_VIEW);\nread1.setData(ContactsContract.Contacts.CONTENT_URI);\nstartActivity(read1);\n")])])]),e("p",[n._v("上面的代码将给出如下结果：")]),n._v(" "),e("p",[n._v("目标组件接收到意图，可以使用getExtras()方法来获取由源组件发送的附加数据。例如：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('// 在代码中的合适位置获取包对象\nBundle extras = getIntent().getExtras();\n\n// 通过键解压数据\nString value1 = extras.getString("Key1");\nString value2 = extras.getString("Key2");\n')])])]),e("p",[n._v("实例\n下面的实例演示使用 Android 意图来启动各种 Android 内置应用程序的功能。")]),n._v(" "),e("p",[n._v('步骤\t描述\n1\t使用 Android Studio IDE 创建 Android 应用程序，并命名为Intent filter，包名为 com.runoob.intentfilter。当创建项目时，确保目标 SDK 和用最新版本的 Android SDK 进行编译使用高级的API。\n2\t修改src/com.runoob.intentfilter/MainActivity.java文件，并添加代码定义两个监听器来对应两个按钮"启动浏览器"和"启动电话"\n3\t修改res/layout/activity_main.xml布局文件，在线性布局中添加3个按钮。\n4\t启动Android模拟器来运行应用程序，并验证应用程序所做改变的结果。\n以下是src/com.runoob.intentfilter/MainActivity.java文件的内容：')]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('package com.runoob.intentfilter;\n\nimport android.content.Intent;\nimport android.net.Uri;\nimport android.support.v7.app.ActionBarActivity;\nimport android.os.Bundle;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.widget.Button;\n\n\npublic class MainActivity extends ActionBarActivity {\n    Button b1,b2;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        b1=(Button)findViewById(R.id.button);\n        b1.setOnClickListener(new View.OnClickListener() {\n\n            @Override\n            public void onClick(View v) {\n                Intent i = new Intent(android.content.Intent.ACTION_VIEW, Uri.parse("https://www.runoob.com"));\n                startActivity(i);\n            }\n        });\n\n        b2=(Button)findViewById(R.id.button2);\n        b2.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Intent i = new Intent(android.content.Intent.ACTION_VIEW,Uri.parse("tel:9510300000"));\n                startActivity(i);\n            }\n        });\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.menu_main, menu);\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        // Handle action bar item clicks here. The action bar will\n        // automatically handle clicks on the Home/Up button, so long\n        // as you specify a parent activity in AndroidManifest.xml.\n\n        int id = item.getItemId();\n\n        //noinspection SimplifiableIfStatement\n        if (id == R.id.action_settings) {\n            return true;\n        }\n        return super.onOptionsItemSelected(item);\n    }\n}\n')])])]),e("p",[n._v("下面是res/layout/activity_main.xml文件的内容：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:tools="http://schemas.android.com/tools"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    android:paddingLeft="@dimen/activity_horizontal_margin"\n    android:paddingRight="@dimen/activity_horizontal_margin"\n    android:paddingTop="@dimen/activity_vertical_margin"\n    android:paddingBottom="@dimen/activity_vertical_margin"\n    tools:context=".MainActivity">\n\n    <TextView\n        android:id="@+id/textView1"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="意图实例"\n        android:layout_alignParentTop="true"\n        android:layout_centerHorizontal="true"\n        android:textSize="30dp" />\n\n    <TextView\n        android:id="@+id/textView2"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="www.runoob.com"\n        android:textColor="#ff87ff09"\n        android:textSize="30dp"\n        android:layout_below="@+id/textView1"\n        android:layout_centerHorizontal="true" />\n\n    <ImageButton\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:id="@+id/imageButton"\n        android:src="@drawable/ic_launcher"\n        android:layout_below="@+id/textView2"\n        android:layout_centerHorizontal="true" />\n\n    <EditText\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:id="@+id/editText"\n        android:layout_below="@+id/imageButton"\n        android:layout_alignRight="@+id/imageButton"\n        android:layout_alignEnd="@+id/imageButton" />\n\n    <Button\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="启动浏览器"\n        android:id="@+id/button"\n        android:layout_alignTop="@+id/editText"\n        android:layout_alignRight="@+id/textView1"\n        android:layout_alignEnd="@+id/textView1"\n        android:layout_alignLeft="@+id/imageButton"\n        android:layout_alignStart="@+id/imageButton" />\n\n    <Button\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="启动电话"\n        android:id="@+id/button2"\n        android:layout_below="@+id/button"\n        android:layout_alignLeft="@+id/button"\n        android:layout_alignStart="@+id/button"\n        android:layout_alignRight="@+id/textView2"\n        android:layout_alignEnd="@+id/textView2" />\n</RelativeLayout>\n')])])]),e("p",[n._v("下面是res/values/strings/xml的内容，定义了两个新的常量。")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<?xml version="1.0" encoding="utf-8"?>\n<resources>\n   <string name="app_name">Intent filter</string>\n   <string name="action_settings">Settings</string>\n</resources>\n')])])]),e("p",[n._v("下面是默认的AndroidManifest.xml的内容：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<?xml version="1.0" encoding="utf-8"?>\n<manifest xmlns:android="http://schemas.android.com/apk/res/android"\n    package="com.runoob.intentfilter"\n    android:versionCode="1"\n    android:versionName="1.0" >\n\n    <uses-sdk\n        android:minSdkVersion="8"\n        android:targetSdkVersion="22" />\n\n    <application\n        android:allowBackup="true"\n        android:icon="@drawable/ic_launcher"\n        android:label="@string/app_name"\n        android:theme="@style/Base.Theme.AppCompat" >\n\n        <activity\n            android:name="com.runoob.intentfilter.MainActivity"\n            android:label="@string/app_name" >\n\n            <intent-filter>\n                <action android:name="android.intent.action.MAIN" />\n                <category android:name="android.intent.category.LAUNCHER" />\n            </intent-filter>\n\n        </activity>\n\n    </application>\n</manifest>\n')])])]),e("p",[n._v("让我们运行刚刚修改的 Intent filter 应用程序。我假设你已经在安装环境时创建了 AVD。打开你的项目中的活动文件，点击工具栏中的图片图标来在 Android Studio 中运行应用程序。Android Studio 在 AVD 上安装应用程序并启动它。如果一切顺利，将在模拟器窗口上显示如下：")]),n._v(" "),e("p",[n._v('现在点击"启动浏览器"按钮，这将根据配置启动一个浏览器，并且显示https://www.runoob.com如下：')]),n._v(" "),e("p",[n._v('类似的方式，你可以点击"启动电话"按钮来打开电话界面，这将允许你拨打已经给定的电话号码。')]),n._v(" "),e("p",[e("strong",[n._v("意图过滤器")]),n._v("\n你已经看到如何使用意图来调用另外的活动。 Android 操作系统使用过滤器来指定一系列活动、服务和广播接收器处理意图，需要借助于意图所指定的动作、类别、数据模式。在 manifest 文件中使用 "),e("code",[n._v("<intent-filter>")]),n._v("  元素在活动，服务和广播接收器中列出对应的动作，类别和数据类型。")]),n._v(" "),e("p",[n._v("下面的实例展示AndroidManifest.xml文件的一部分，指定一个活动com.runoob.intentfilter.CustomActivity可以通过设置的动作，类别及数据来调用：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<activity android:name=".CustomActivity"\n   android:label="@string/app_name">\n\n   <intent-filter>\n      <action android:name="android.intent.action.VIEW" />\n      <action android:name="com.example.MyApplication.LAUNCH" />\n      <category android:name="android.intent.category.DEFAULT" />\n      <data android:scheme="http" />\n   </intent-filter>\n\n</activity>\n')])])]),e("p",[n._v("当活动被上面的过滤器所定义，其他活动就可以通过下面的方式来调用这个活动。使用 android.intent.action.VIEW，使用 com.runoob.intentfilter.LAUNCH 动作，并提供android.intent.category.DEFAULT类别。")]),n._v(" "),e("p",[n._v('元素指定要被调用的活动所期望的数据类型。上面的实例中，自定义活动期望的数据由"http://"开头。')]),n._v(" "),e("p",[n._v("有这样的情况，通过过滤器，意图将被传递到多个的活动或者服务，用户将被询问启动哪个组件。如果没有找到目标组件，将发生一个异常。")]),n._v(" "),e("p",[n._v("在调用活动之前，有一系列的 Android 检查测试：")]),n._v(" "),e("p",[n._v("过滤器 "),e("code",[n._v("<intent-filter>")]),n._v(" 需要列出一个或者多个的动作，不能为空；过滤器至少包含一个 元素，否则将阻塞所有的意图。如果多个动作被提到，Android 在调用活动前尝试匹配其中提到的一个动作。\n过滤器 "),e("code",[n._v("<intent-filter>")]),n._v(" 可能列出0个，1个或者多个类别。如果没有类别被提到，Android 通过这个测试，如果有多个类别被提及，意图通过类型测试，每个意图对象的分类必须匹配过滤器中的一个分类。\n每个 元素可以指定一个 URI 和一个数据类型(元媒体类型)。这里有独立的属性，如 URI 中的每个部分：模式，主机，端口和路径。意图包含有 URI 和类型，只有它的类型匹配了过滤器中列出的某个类型，则通过数据类型部分的测试。\n实例\n下面的实例是上面实例的一些修改。这里我们将看到如果一个意图调用定义的两个活动，Android 如何来解决冲突；如何使用过滤器来调用自定义活动；如果没有为意图定义合适的活动，则会出现异常。")]),n._v(" "),e("p",[n._v("步骤\t说明\n1\t使用Android Studio IDE创建Android应用程序，并命名为Intent filter，包名为com.runoob.intentfilter。当创建项目时，确保目标 SDK 和用最新版本的 Android SDK 进行编译使用高级的API。\n2\t修改 src/com.runoob.intentfilter/MainActivity.java 文件，添加代码来定义三个监听器来对应布局文件中定义的三个按钮。\n3\t添加 src/com.runoob.intentfilter/CustomActivity.java 文件来包含一个活动，可以被不同的意图调用。\n4\t修改 res/layout/activity_main.xml 文件在线性布局中添加三个按钮。\n5\t添加 res/lauout/custom_view.xml 布局文件，添加简单地 来显示通过 intent 传递的数据。\n6\t修改 AndroidManifest.xml 文件，添加 "),e("code",[n._v("<intent-filter>")]),n._v(" 定义意图的规则来调用自定义活动。\n7\t启动 Android 模拟器来运行应用程序，并验证应用程序所做改变的结果。\n以下是src/com.runoob.intentfilter/MainActivity.java的内容：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('package com.runoob.intentfilter;\n\nimport android.content.Intent;\nimport android.net.Uri;\nimport android.support.v7.app.ActionBarActivity;\nimport android.os.Bundle;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.widget.Button;\n\n\npublic class MainActivity extends ActionBarActivity {\n    Button b1,b2,b3;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        b1=(Button)findViewById(R.id.button);\n\n        b1.setOnClickListener(new View.OnClickListener() {\n\n            @Override\n            public void onClick(View v) {\n                Intent i = new Intent(android.content.Intent.ACTION_VIEW,Uri.parse("https://www.runoob.com"));\n                startActivity(i);\n            }\n        });\n\n        b2=(Button)findViewById(R.id.button2);\n        b2.setOnClickListener(new View.OnClickListener() {\n\n            @Override\n            public void onClick(View v) {\n                Intent i = new Intent("com.runoob.intentfilter.LAUNCH",Uri.parse("https://www.runoob.com"));\n                startActivity(i);\n            }\n        });\n\n        b3=(Button)findViewById(R.id.button3);\n        b3.setOnClickListener(new View.OnClickListener() {\n\n            @Override\n            public void onClick(View v) {\n                Intent i = new Intent("com.runoob.intentfilter.LAUNCH",Uri.parse("https://www.runoob.com"));\n                startActivity(i);\n            }\n        });\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        // Inflate the menu; this adds items to the action bar if it is present.\n        getMenuInflater().inflate(R.menu.menu_main, menu);\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        // Handle action bar item clicks here. The action bar will\n        // automatically handle clicks on the Home/Up button, so long\n        // as you specify a parent activity in AndroidManifest.xml.\n\n        int id = item.getItemId();\n\n        //noinspection SimplifiableIfStatement\n        if (id == R.id.action_settings) {\n            return true;\n        }\n        return super.onOptionsItemSelected(item);\n    }\n}\n')])])]),e("p",[n._v("下面是src/com.runoob.intentfilter/CustomActivity.java的内容：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("package com.runoob.intentfilter;\n\nimport android.app.Activity;\n        import android.net.Uri;\n        import android.os.Bundle;\n        import android.widget.TextView;\n\npublic class CustomActivity extends Activity {\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.custom_view);\n        TextView label = (TextView) findViewById(R.id.show_data);\n        Uri url = getIntent().getData();\n        label.setText(url.toString());\n    }\n}\n")])])]),e("p",[n._v("下面是res/layout/activity_main.xml 的内容：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:tools="http://schemas.android.com/tools"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    android:paddingLeft="@dimen/activity_horizontal_margin"\n    android:paddingRight="@dimen/activity_horizontal_margin"\n    android:paddingTop="@dimen/activity_vertical_margin"\n    android:paddingBottom="@dimen/activity_vertical_margin"\n    tools:context=".MainActivity">\n\n    <TextView\n        android:id="@+id/textView1"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="意图实例"\n        android:layout_alignParentTop="true"\n        android:layout_centerHorizontal="true"\n        android:textSize="30dp" />\n\n    <TextView\n        android:id="@+id/textView2"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="www.runoob.com"\n        android:textColor="#ff87ff09"\n        android:textSize="30dp"\n        android:layout_below="@+id/textView1"\n        android:layout_centerHorizontal="true" />\n\n    <ImageButton\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:id="@+id/imageButton"\n        android:src="@drawable/ic_launcher"\n        android:layout_below="@+id/textView2"\n        android:layout_centerHorizontal="true" />\n\n    <EditText\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:id="@+id/editText"\n        android:layout_below="@+id/imageButton"\n        android:layout_alignRight="@+id/imageButton"\n        android:layout_alignEnd="@+id/imageButton" />\n\n    <Button\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="通过View动作启动浏览器"\n        android:id="@+id/button"\n        android:layout_alignTop="@+id/editText"\n        android:layout_alignRight="@+id/textView1"\n        android:layout_alignEnd="@+id/textView1"\n        android:layout_alignLeft="@+id/imageButton"\n        android:layout_alignStart="@+id/imageButton" />\n\n    <Button\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="通过Launch动作启动浏览器"\n        android:id="@+id/button2"\n        android:layout_below="@+id/button"\n        android:layout_alignLeft="@+id/button"\n        android:layout_alignStart="@+id/button"\n        android:layout_alignRight="@+id/textView2"\n        android:layout_alignEnd="@+id/textView2" />\n\n    <Button\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="异常情况"\n        android:id="@+id/button3"\n        android:layout_below="@+id/button2"\n        android:layout_alignLeft="@+id/button2"\n        android:layout_alignStart="@+id/button2"\n        android:layout_alignRight="@+id/textView2"\n        android:layout_alignEnd="@+id/textView2" />\n\n</RelativeLayout>\n')])])]),e("p",[n._v("下面是res/layout/custom_view.xml文件的内容：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<?xml version="1.0" encoding="utf-8"?>\n<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"\n   android:orientation="vertical"\n   android:layout_width="fill_parent"\n   android:layout_height="fill_parent">\n\n   <TextView android:id="@+id/show_data"\n      android:layout_width="fill_parent"\n      android:layout_height="400dp"/>\n\n</LinearLayout>\n')])])]),e("p",[n._v("下面是res/values/strings.xml文件的内容：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<?xml version="1.0" encoding="utf-8"?>\n<resources>\n   <string name="app_name">My Application</string>\n   <string name="action_settings">Settings</string>\n</resources>\n')])])]),e("p",[n._v("下面是AndroidManifest.xml文件的内容：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<?xml version="1.0" encoding="utf-8"?>\n<manifest xmlns:android="http://schemas.android.com/apk/res/android"\n    package="com.runoob.intentfilter"\n    android:versionCode="1"\n    android:versionName="1.0" >\n\n    <uses-sdk\n        android:minSdkVersion="8"\n        android:targetSdkVersion="22" />\n\n    <application\n        android:allowBackup="true"\n        android:icon="@drawable/ic_launcher"\n        android:label="@string/app_name"\n        android:theme="@style/Base.Theme.AppCompat" >\n\n        <activity\n            android:name="com.runoob.intentfilter.MainActivity"\n            android:label="@string/app_name" >\n\n            <intent-filter>\n                <action android:name="android.intent.action.MAIN" />\n                <category android:name="android.intent.category.LAUNCHER" />\n            </intent-filter>\n\n        </activity>\n\n        <activity android:name="com.runoob.intentfilter.CustomActivity"\n            android:label="@string/app_name">\n\n        <intent-filter>\n            <action android:name="android.intent.action.VIEW" />\n            <action android:name="com.runoob.intentfilter.LAUNCH" />\n            <category android:name="android.intent.category.DEFAULT" />\n            <data android:scheme="http" />\n        </intent-filter>\n\n        </activity>\n\n    </application>\n</manifest>\n')])])]),e("p",[n._v("让我们运行刚刚修改的 Intent filter 应用程序。我假设你已经在安装环境时创建了 AVD 。打开你的项目中的活动文件，点击工具栏中的图片图标来在 Android Studio 中运行应用程序。 Android Studio 在 AVD 上安装应用程序并启动它。如果一切顺利，将在模拟器窗口上显示如下：")]),n._v(" "),e("p",[n._v('点击第一个按钮"使用View动作启动浏览器"。这里我们定义我们自定义的活动包含"android.intent.action.VIEW"，并且 Android 系统已经定义了默认的活动来对应VIEW动作来启动Web浏览器，因此 Android 显示下面的选项来选择你想要启动的活动：')]),n._v(" "),e("p",[n._v("如果你选择浏览器， Android 将启动 Web 浏览器，并打开 www.runoob.com 网站。如果你选择 IntentDemo选项，Android 将启动 CustomActivity，该活动什么都没有做，仅仅是捕获并在TextView中显示传递的数据。")]),n._v(" "),e("p",[n._v('现在，通过返回按钮返回并点击"通过Launch动作启动浏览器"按钮，这里 Android 应用过滤器来选择定义的活动，并简单启动自定义活动。')]),n._v(" "),e("p",[n._v('再次使用返回按钮返回，并点击"异常条件"按钮，这里Android尝试找到一个由意图给定的有效的过滤器，但没有找到一个定义的有效的活动。因为我们使用 https 代替 http 的数据，并给定了正确的动作，一次 Android 产生了一个异常。如下：')])],1)}),[],!1,null,null,null);t.default=a.exports}}]);